
import streamlit as st
import pandas as pd
import plotly.express as px
import statsmodels.api as sm
import numpy as np

st.set_page_config(layout="wide")
st.logo('logo_osui.png',size='large')


# Fonction pour charger un onglet sp√©cifique depuis Google Sheets
@st.cache_data
def load_sheet(file_id, gid):
    url = f"https://docs.google.com/spreadsheets/d/{file_id}/export?format=csv&gid={gid}"
    df = pd.read_csv(url)
    return df

# Charger chaque onglet dans un DataFrame
file_id = st.secrets["google_sheets"]["file_id"]
# file_id = "1DoYkiK9hmuoXnw2J4Hu0DC9K-WV53DH3Mus8oAkMW88"

# Dictionnaire des onglets et leurs identifiants GID
sheets = {
    "cp": "598781322",
    "ce1": "780189338",
    "ce2": "780104876",
    "cm1": "1004968514",
    "cm2": "537652203",
    "6e": "515412955",
    "4e": "1016063815",
    "2nde": "989209309",
    'geo':'191664424'
}

# Colonnes √† conserver en string
STRING_COLUMNS = ["Nom d'√©tablissement", "Pays", "Ville", "Statut MLF"]

@st.cache_data
def load_sheet(file_id, gid):
    """Charge un onglet sp√©cifique depuis Google Sheets et d√©tecte les lignes supprim√©es."""
    url = f"https://docs.google.com/spreadsheets/d/{file_id}/export?format=csv&gid={gid}"

    # Lire les donn√©es brutes sans suppression
    raw_df = pd.read_csv(url, encoding="utf-8", dtype=str)

    # Charger les donn√©es avec on_bad_lines="skip"
    df = pd.read_csv(url, encoding="utf-8", on_bad_lines="skip", dtype=str)

    # V√©rifier le nombre de lignes supprim√©es
    lines_skipped = len(raw_df) - len(df)

    print(f"‚ö†Ô∏è {lines_skipped} lignes ont √©t√© ignor√©es lors du chargement.")

    return df

def find_conversion_errors(df):
    """Identifie les valeurs non convertibles dans les colonnes num√©riques."""
    errors = {}
    for col in df.columns:
        if col not in STRING_COLUMNS:
            invalid_values = df[df[col].str.contains(r"[^0-9,.\-]", regex=True, na=False)][col].tolist()
            if invalid_values:
                errors[col] = invalid_values
    return errors

def clean_numeric_columns(df):
    """Remplace les virgules par des points et convertit les valeurs en float."""
    for col in df.columns:
        if col not in STRING_COLUMNS:
            df[col] = df[col].str.replace(',', '.', regex=True)  # Remplacement des virgules
            df[col] = pd.to_numeric(df[col], errors='coerce')  # Convertir en float
    return df

def convert_column_types(df):
    """Convertit les colonnes texte en str et les autres en float apr√®s nettoyage."""
    for col in df.columns:
        if col in STRING_COLUMNS:
            df[col] = df[col].astype(str)  # Assurer que les colonnes restent du texte

    # Identifier les erreurs de conversion AVANT nettoyage
    errors = find_conversion_errors(df)
    if errors:
        print("üö® Erreurs de conversion d√©tect√©es :")
        for col, values in errors.items():
            print(f"   - {col}: {values[:5]} ...")  # Afficher seulement quelques erreurs
    else:
        print("‚úÖ Aucune erreur de conversion d√©tect√©e avant nettoyage.")

    df = clean_numeric_columns(df)  # Nettoyer et convertir les nombres
    return df

def process_all_sheets(file_id, sheets):
    """Charge, convertit et v√©rifie tous les onglets du Google Sheets."""
    dataframes = {}
    for name, gid in sheets.items():
        print(f"\nüì• Chargement du fichier : {name}")
        df = load_sheet(file_id, gid)

        # V√©rifier si le fichier a des colonnes Unnamed (cas de res_4)
        if any("Unnamed" in col for col in df.columns):
            print("‚ö†Ô∏è Ce fichier contient des colonnes Unnamed, elles seront supprim√©es.")
            df = df.loc[:, ~df.columns.str.contains("Unnamed")]

        print(f"üîç V√©rification des types AVANT conversion :")
        print(df.dtypes)

        df = convert_column_types(df)

        print(f"‚úÖ V√©rification des types APR√àS conversion :")
        print(df.dtypes)

        dataframes[name] = df
    return dataframes

# Ex√©cuter le processus sur tous les onglets
dataframes = process_all_sheets(file_id, sheets)


# Dictionnaire unique associant chaque comp√©tence √† une mati√®re
competences_matiere = {
    # üìò Comp√©tences en Maths
    "Lire des nombres": "Maths",
    "R√©soudre des probl√®mes": "Maths",
    "Quantifier et d√©nombrer": "Maths",
    "Comparer des nombres": "Maths",
    "Placer un nombre sur une ligne num√©rique": "Maths",
    "Reconnaitre des nombres": "Maths",
    "Calculer en ligne": "Maths",
    "Calculer mentalement": "Maths",
    "Nommer, lire, √©crire, repr√©senter des nombres": "Maths",
    "Calculer": "Maths",
    "Ordonner des nombres": "Maths",
    "Calculer avec des nombres entiers": "Maths",
    "R√©solution de probl√®me : r√©soudre des probl√®mes en utilisant des nombres, des donn√©es et des grandeurs": "Maths",
    "Espaces et g√©om√©trie": "Maths",
    "Grandeurs et mesures": "Maths",
    "Nombres et calcul": "Maths",
    "Calcul litt√©ral : Utiliser des expressions litt√©rales pour traduire ou r√©soudre des probl√®mes": "Maths",
    "Calcul litt√©ral : Conna√Ætre et utiliser des donn√©es et la notion de fonction": "Maths",

    # üìï Comp√©tences en Fran√ßais
    "Comprendre un texte lu par l‚Äôenseignant(e)": "Fran√ßais",
    "Comprendre des mots lu par l‚Äôenseignant(e)": "Fran√ßais",
    "Comprendre des phrases lues par l‚Äôenseignant(e)": "Fran√ßais",
    "Discriminer des sons": "Fran√ßais",
    "Reconnaitre des lettres": "Fran√ßais",
    "Comprendre un texte lu seul(e)": "Fran√ßais",
    "Comprendre des phrases lues seul(e)": "Fran√ßais",
    "Comprendre des mots et des phrases lus par l‚Äôenseignant(e)": "Fran√ßais",
    "√âcrire des syllabes": "Fran√ßais",
    "Lire": "Fran√ßais",
    "√âcrire des mots dict√©s": "Fran√ßais",
    "Orthographe de base": "Fran√ßais",
    "Se rep√©rer dans une phrase": "Fran√ßais",
    "Ma√Ætriser l‚Äôorthographe grammaticale de base": "Fran√ßais",
    "Construire le lexique": "Fran√ßais",
    "Lire et comprendre un texte": "Fran√ßais",
    "Comprendre le fonctionnement de la langue : Comprendre et mobiliser le lexique": "Fran√ßais",
    "Comprendre et s'exprimer √† l'oral : comprendre un message oral": "Fran√ßais",
    "Comprendre le fonctionnement de la langue : Se rep√©rer dans une phrase et identifier sa composition": "Fran√ßais",
    "Comprendre le fonctionnement de la langue : ma√Ætriser l'orthographe": "Fran√ßais"
}

# D√©finition des niveaux de primaire et secondaire
niveaux_primaire = ["cp", "ce1", "ce2", "mc1", "mc2"]
niveaux_secondaire = ["6e", "4e", "2nde"]

# Fonction pour calculer la moyenne d'une mati√®re en fonction des comp√©tences associ√©es
def calculer_moyenne_par_matiere(dataframes, competences_matiere, matiere):
    scores = []
    for niveau, df in dataframes.items():
        for comp in df.columns:
            if comp in competences_matiere and competences_matiere[comp] == matiere:
                scores.extend(df[comp].dropna().tolist())
    return sum(scores) / len(scores) if scores else 0

# Calcul des moyennes
moyenne_maths = calculer_moyenne_par_matiere(dataframes, competences_matiere, "Maths")
moyenne_francais = calculer_moyenne_par_matiere(dataframes, competences_matiere, "Fran√ßais")


# üìå Cr√©ation d'un DataFrame unique pour les moyennes par √©tablissement
moyennes_etablissements = {"Primaire": {}, "Secondaire": {}, "G√©n√©rale": {}}
etablissements=pd.DataFrame()



# üìå Calcul des moyennes pour chaque niveau
for matiere in ["Maths", "Fran√ßais"]:
    moyennes_primaire, moyennes_secondaire, moyennes_generale = [], [], []

    for niveau, df in dataframes.items():
        if not df.empty:
            colonnes_matiere = [col for col in df.columns if competences_matiere.get(col) == matiere]
            if colonnes_matiere:
                df[colonnes_matiere] = df[colonnes_matiere].apply(pd.to_numeric, errors='coerce')
                scores_moyens = df.groupby("Nom d'√©tablissement")[colonnes_matiere].mean().mean(axis=1)

                if niveau in niveaux_primaire:
                    moyennes_primaire.append(scores_moyens)
                if niveau in niveaux_secondaire:
                    moyennes_secondaire.append(scores_moyens)
                moyennes_generale.append(scores_moyens)

    # üìå Fusion des moyennes pour chaque cat√©gorie
    moyennes_etablissements["Primaire"][matiere] = pd.concat(moyennes_primaire).groupby(level=0).mean()
    moyennes_etablissements["Secondaire"][matiere] = pd.concat(moyennes_secondaire).groupby(level=0).mean()
    moyennes_etablissements["G√©n√©rale"][matiere] = pd.concat(moyennes_generale).groupby(level=0).mean()

# üìå Transformer les s√©ries en DataFrames et renommer les colonnes
for categorie in ["Primaire", "Secondaire", "G√©n√©rale"]:
    moyennes_etablissements[categorie]["Maths"] = moyennes_etablissements[categorie]["Maths"].rename(f"Moyenne Maths {categorie}").to_frame()
    moyennes_etablissements[categorie]["Fran√ßais"] = moyennes_etablissements[categorie]["Fran√ßais"].rename(f"Moyenne Fran√ßais {categorie}").to_frame()

# üìå Fusion des moyennes avec le DataFrame des √©tablissements
etablissements = pd.DataFrame(dataframes["geo"][["Nom d'√©tablissement", "Ville", "Pays"]].drop_duplicates())

for categorie in ["Primaire", "Secondaire", "G√©n√©rale"]:
    etablissements = etablissements.merge(moyennes_etablissements[categorie]["Maths"], on="Nom d'√©tablissement", how="left")
    etablissements = etablissements.merge(moyennes_etablissements[categorie]["Fran√ßais"], on="Nom d'√©tablissement", how="left")

# üìå Ajout des coordonn√©es GPS depuis dataframes['geo']
etablissements = etablissements.merge(dataframes['geo'][["Nom d'√©tablissement", "Latitude", "Longitude"]], on="Nom d'√©tablissement", how="left")

# Suppression des √©tablissements sans moyenne et sans coordonn√©es GPS
etablissements = etablissements.dropna(subset=["Moyenne Maths G√©n√©rale", "Moyenne Fran√ßais G√©n√©rale", "Latitude", "Longitude"])

# üìå Calcul des moyennes globales
etablissements["Moyenne Maths/Fran√ßais G√©n√©rale"] = (etablissements["Moyenne Maths G√©n√©rale"] + etablissements["Moyenne Fran√ßais G√©n√©rale"]) / 2
etablissements["Moyenne Maths/Fran√ßais Primaire"] = (etablissements["Moyenne Maths Primaire"] + etablissements["Moyenne Fran√ßais Primaire"]) / 2
etablissements["Moyenne Maths/Fran√ßais Secondaire"] = (etablissements["Moyenne Maths Secondaire"] + etablissements["Moyenne Fran√ßais Secondaire"]) / 2

# def carte_etablissements(etablissements, niveau,titre):
#     """
#     G√©n√®re une carte interactive des √©tablissements scolaires en fonction d'une moyenne choisie (Primaire, Secondaire, ou G√©n√©rale),
#     en filtrant ceux qui n'ont pas de donn√©es pour le niveau s√©lectionn√©.

#     :param etablissements: DataFrame contenant les √©tablissements et leurs coordonn√©es.
#     :param niveau: "G√©n√©rale", "Primaire" ou "Secondaire" pour choisir la moyenne affich√©e.
#     :param titre: Titre de la carte.
#     :return: Figure Plotly.
#     """

#     # S√©lection de la colonne correspondante et filtrage des √©tablissements
#     if niveau == "G√©n√©rale":
#         colonne_moyenne = "Moyenne Maths/Fran√ßais G√©n√©rale"
#         df_filtre = etablissements  # Conserver tous les √©tablissements
#     elif niveau == "Primaire":
#         colonne_moyenne = "Moyenne Maths/Fran√ßais Primaire"
#         df_filtre = etablissements.dropna(subset=[colonne_moyenne])  # Supprime les √©tablissements sans r√©sultats en primaire
#     elif niveau == "Secondaire":
#         colonne_moyenne = "Moyenne Maths/Fran√ßais Secondaire"
#         df_filtre = etablissements.dropna(subset=[colonne_moyenne])  # Supprime les √©tablissements sans r√©sultats en secondaire
#     else:
#         raise ValueError("Le niveau doit √™tre 'G√©n√©rale', 'Primaire' ou 'Secondaire'.")

#     # Cr√©ation de la carte avec les √©tablissements filtr√©s
#     fig = px.scatter_map(
#         df_filtre,
#         lat="Latitude",
#         lon="Longitude",
#         hover_name="Nom d'√©tablissement",
#         hover_data={
#             "Ville": True,
#             colonne_moyenne: True,
#             "Latitude": False,
#             "Longitude": False
#         },
#         color=colonne_moyenne,  # D√©grad√© de couleur bas√© sur la moyenne s√©lectionn√©e
#         zoom=0.5,  # Zoom initial
#         height=700,
#         color_continuous_scale="RdYlGn",  # D√©grad√© de rouge (faible) √† vert (fort)
#     )

#     # Fixer la taille des points et l'opacit√©
#     fig.update_traces(marker=dict(size=20, opacity=0.7))

#     # Mise en page et affichage
#     fig.update_layout(
#         map_style="open-street-map",
#         margin={"r": 0, "t": 0, "l": 0, "b": 0},
#         coloraxis_colorbar=dict(title=None)  # Ajout de la barre de couleur
#     )

#     fig.update_layout(
#         height=350
#         )

#     return fig

def jitter_coordinates(df, lat_col="Latitude", lon_col="Longitude", jitter=0.1):
    """
    Ajoute un l√©ger bruit al√©atoire aux coordonn√©es latitude/longitude
    pour √©viter la superposition des points.

    :param df: DataFrame contenant les √©tablissements
    :param lat_col: Nom de la colonne de latitude
    :param lon_col: Nom de la colonne de longitude
    :param jitter: Amplitude du bruit al√©atoire ajout√©
    :return: DataFrame avec coordonn√©es ajust√©es si n√©cessaire
    """
    coords_count = df.groupby([lat_col, lon_col])[lat_col].transform('count')
    mask = coords_count > 1

    df.loc[mask, lat_col] += np.random.uniform(-jitter, jitter, size=mask.sum())
    df.loc[mask, lon_col] += np.random.uniform(-jitter, jitter, size=mask.sum())

    return df

def carte_etablissements(etablissements, niveau, titre, jitter=0.1):
    """
    G√©n√®re une carte interactive des √©tablissements scolaires en fonction d'une moyenne choisie (Primaire, Secondaire, ou G√©n√©rale),
    en filtrant ceux qui n'ont pas de donn√©es pour le niveau s√©lectionn√© et en ajustant les coordonn√©es si n√©cessaire.

    :param etablissements: DataFrame contenant les √©tablissements et leurs coordonn√©es.
    :param niveau: "G√©n√©rale", "Primaire" ou "Secondaire" pour choisir la moyenne affich√©e.
    :param titre: Titre de la carte.
    :param jitter: Amplitude du bruit al√©atoire pour √©viter la superposition des points (0 pour d√©sactiver).
    :return: Figure Plotly.
    """
    # S√©lection de la colonne correspondante et filtrage des √©tablissements
    if niveau == "G√©n√©rale":
        colonne_moyenne = "Moyenne Maths/Fran√ßais G√©n√©rale"
        df_filtre = etablissements.copy()
    elif niveau == "Primaire":
        colonne_moyenne = "Moyenne Maths/Fran√ßais Primaire"
        df_filtre = etablissements.dropna(subset=[colonne_moyenne]).copy()

    elif niveau == "Secondaire":
        colonne_moyenne = "Moyenne Maths/Fran√ßais Secondaire"
        df_filtre = etablissements.dropna(subset=[colonne_moyenne]).copy()
    else:
        raise ValueError("Le niveau doit √™tre 'G√©n√©rale', 'Primaire' ou 'Secondaire'.")

    # Appliquer le jitter si n√©cessaire
    if jitter > 0:
        df_filtre = jitter_coordinates(df_filtre, jitter=jitter)

    # Cr√©ation de la carte avec les √©tablissements filtr√©s
    fig = px.scatter_map(
        df_filtre,
        lat="Latitude",
        lon="Longitude",
        hover_name="Nom d'√©tablissement",
        hover_data={
            "Ville": True,
            colonne_moyenne: True,
            "Latitude": False,
            "Longitude": False
        },
        color=colonne_moyenne,  # D√©grad√© de couleur bas√© sur la moyenne s√©lectionn√©e
        zoom=1,  # Zoom initial
        height=350,
        color_continuous_scale="RdYlGn",  # D√©grad√© de rouge (faible) √† vert (fort)
    )

    # Fixer la taille des points et l'opacit√©
    fig.update_traces(marker=dict(size=15, opacity=0.7))

    # Mise en page et affichage
    fig.update_layout(
        map_style="open-street-map",
        margin={"r": 0, "t": 0, "l": 0, "b": 0},
        coloraxis_colorbar=dict(title="Moyenne")  # Ajout de la barre de couleur
    )

    return fig



def creer_scatter_maths_francais(dataframes):
    """
    Cr√©e un graphique de corr√©lation entre Maths et Fran√ßais.
    Chaque point repr√©sente un √©tablissement, avec une couleur diff√©rente selon le pays.
    La taille des points est proportionnelle √† l'√©cart entre les moyennes Maths et Fran√ßais.
    """

    etablissements = {}

    for niveau, df in dataframes.items():
        for _, row in df.iterrows():
            nom = row["Nom d'√©tablissement"]
            pays = row["Pays"]  # Ajout de la colonne Pays
            maths = row[[col for col in df.columns if competences_matiere.get(col) == "Maths"]].mean()
            francais = row[[col for col in df.columns if competences_matiere.get(col) == "Fran√ßais"]].mean()

            if pd.notna(maths) and pd.notna(francais):  # V√©rifie qu'il y a des valeurs valides
                if nom not in etablissements:
                    etablissements[nom] = {"maths": [], "francais": [], "pays": pays}

                etablissements[nom]["maths"].append(maths)
                etablissements[nom]["francais"].append(francais)

    # Cr√©ation du DataFrame final
    data = []
    for nom, valeurs in etablissements.items():
        moyenne_maths = sum(valeurs["maths"]) / len(valeurs["maths"])
        moyenne_francais = sum(valeurs["francais"]) / len(valeurs["francais"])
        ecart = abs(moyenne_maths - moyenne_francais)
        data.append([nom, moyenne_maths, moyenne_francais, ecart, valeurs["pays"]])

    df_final = pd.DataFrame(data, columns=["√âtablissement", "Moyenne Maths", "Moyenne Fran√ßais", "Taille Point", "Pays"])

    # Cr√©ation du graphique Scatter avec couleur selon le pays et une taille variable
    fig = px.scatter(
        df_final,
        x="Moyenne Maths",
        y="Moyenne Fran√ßais",
        hover_name="√âtablissement",
        size="Taille Point",  # Taille des points proportionnelle √† l'√©cart
        color="Pays"  # Couleur diff√©rente par pays
    #     trendline="ols"  # R√©gression lin√©aire pour tous
    )

    # Ajout de la r√©gression lin√©aire pour tous les points
    fig.add_traces(px.scatter(df_final, x="Moyenne Maths", y="Moyenne Fran√ßais", trendline="ols").data[1])

    # Mise en forme
    fig.update_layout(
        xaxis_title="Moyenne Maths (%)",
        yaxis_title="Moyenne Fran√ßais (%)",
        template="plotly_white",
        height=400
    )

    return fig

# Fonction pour calculer la moyenne par cycle (primaire ou secondaire)
def calculer_moyenne_cycle(dataframes, competences_matiere, matiere, niveaux):
    scores = []
    for niveau in niveaux:
        if niveau in dataframes:
            df = dataframes[niveau]
            for comp in df.columns:
                if comp in competences_matiere and competences_matiere[comp] == matiere:
                    scores.extend(df[comp].dropna().tolist())
    return sum(scores) / len(scores) if scores else 0

# Calcul des moyennes par cycle
moyenne_maths_primaire = calculer_moyenne_cycle(dataframes, competences_matiere, "Maths", niveaux_primaire)
moyenne_francais_primaire = calculer_moyenne_cycle(dataframes, competences_matiere, "Fran√ßais", niveaux_primaire)
moyenne_maths_secondaire = calculer_moyenne_cycle(dataframes, competences_matiere, "Maths", niveaux_secondaire)
moyenne_francais_secondaire = calculer_moyenne_cycle(dataframes, competences_matiere, "Fran√ßais", niveaux_secondaire)

def creer_bar_chart_maths_francais(maths_primaire, francais_primaire, maths_secondaire, francais_secondaire):
    """
    Cr√©e un graphique en barres comparant les moyennes en Maths et Fran√ßais pour le Primaire et le Secondaire,
    avec suppression de "Mati√®re" dans la l√©gende et du titre de l'axe X.
    """

    # Cr√©ation du DataFrame
    df = pd.DataFrame({
        "Cycle": ["Primaire", "Primaire", "Secondaire", "Secondaire"],
        "Mati√®re": ["Maths", "Fran√ßais", "Maths", "Fran√ßais"],
        "Moyenne": [maths_primaire, francais_primaire, maths_secondaire, francais_secondaire]
    })

    # Cr√©ation du graphique avec Plotly Express
    fig = px.bar(
        df,
        x="Cycle",
        y="Moyenne",
        color="Mati√®re",
        barmode="group",
        color_discrete_sequence=px.colors.qualitative.G10
    )

    # Suppression du titre de la l√©gende
    fig.update_layout(
        xaxis_title="",  # Supprime "Cycle"
        yaxis_title="Moyenne (%)",
        legend_title_text="",  # Supprime "Mati√®re" dans la l√©gende
        yaxis=dict(range=[0, 100]),  # √âchelle de 0 √† 100%
        template="plotly_white"
    )

    return fig

def creer_boxplot_combine(dataframes):
    """
    Cr√©e un boxplot combin√© avec Maths et Fran√ßais pour chaque niveau.
    """
    data = []

    for niveau, df in dataframes.items():
        for matiere in ["Maths", "Fran√ßais"]:
            competences = [col for col in df.columns if competences_matiere.get(col) == matiere]

            for col in competences:
                for score in df[col].dropna():
                    data.append([niveau, score, matiere])

    df_final = pd.DataFrame(data, columns=["Niveau", "Score", "Mati√®re"])

    # Cr√©ation du boxplot combin√©
    fig = px.box(
        df_final,
        x="Niveau",
        y="Score",
        color="Mati√®re",  # Utilisation de la couleur pour diff√©rencier Maths/Fran√ßais
        color_discrete_sequence=px.colors.qualitative.G10
    )

    # Mise en forme
    fig.update_layout(
        xaxis_title="",
        yaxis_title="R√©sultats (%)",
        #legend_title_text="",
        template="plotly_white",
        height=400,
        legend=dict(
        x=1.05,  # D√©place la l√©gende √† droite du graphique
        y=0.5,   # Place la l√©gende √† mi-hauteur
        xanchor="left",  # S'assure que la l√©gende est align√©e √† gauche de x=1.05
        yanchor="middle",  # Centre verticalement la l√©gende
        orientation="v"  # Garde la l√©gende verticale
    ),
        yaxis=dict(range=[0, 130])
    )

    return fig


def evolution_moyenne_globale_par_niveau(dataframes, competences_matiere):
    """
    Cr√©e un graphique en ligne montrant l'√©volution des moyennes globales en Fran√ßais et en Maths
    pour l'ensemble des √©tablissements au cours des diff√©rents niveaux (du CP √† la 2nde).

    :param dataframes: Dictionnaire contenant les DataFrames des diff√©rents niveaux scolaires.
    :param competences_matiere: Dictionnaire associant chaque comp√©tence √† une mati√®re.
    :return: Figure Plotly.
    """

    # Liste des niveaux dans l'ordre
    niveaux = ["cp", "ce1", "ce2", "cm1", "cm2", "6e", "4e", "2nde"]
    niveau_labels = {
        "cp": "CP", "ce1": "CE1", "ce2": "CE2", "cm1": "CM1", "cm2": "CM2",
        "6e": "6e", "4e": "4e", "2nde": "2nde"
    }

    # Initialisation d'un dictionnaire pour stocker les moyennes
    moyenne_globale = {"Niveau": [], "Mati√®re": [], "Moyenne": []}

    # Parcours de chaque niveau et calcul des moyennes globales
    for niveau in niveaux:
        if niveau in dataframes:
            df = dataframes[niveau]

            # Calcul de la moyenne en maths et fran√ßais pour tous les √©tablissements
            maths_moyenne = df[[col for col in df.columns if competences_matiere.get(col) == "Maths"]].mean().mean()
            francais_moyenne = df[[col for col in df.columns if competences_matiere.get(col) == "Fran√ßais"]].mean().mean()

            if not np.isnan(maths_moyenne):
                moyenne_globale["Niveau"].append(niveau_labels[niveau])
                moyenne_globale["Mati√®re"].append("Maths")
                moyenne_globale["Moyenne"].append(maths_moyenne)

            if not np.isnan(francais_moyenne):
                moyenne_globale["Niveau"].append(niveau_labels[niveau])
                moyenne_globale["Mati√®re"].append("Fran√ßais")
                moyenne_globale["Moyenne"].append(francais_moyenne)

    # Cr√©ation du DataFrame final
    df_moyenne_globale = pd.DataFrame(moyenne_globale)

    # Cr√©ation du graphique en ligne
    fig = px.line(
        df_moyenne_globale,
        x="Niveau",
        y="Moyenne",
        markers=True,
        color="Mati√®re",
        color_discrete_sequence=px.colors.qualitative.G10
    )
    fig.update_layout(
        title='Evolution globale',
        height=400,
        legend_title_text="",
        legend=dict(
            orientation="h",  # Affichage horizontal
            yanchor="top",
            y=-0.3,  # Position sous le graphique
            xanchor="center",
            x=0.5  # Centre la l√©gende horizontalement
        ),
        xaxis_title=None  # Supprime compl√®tement l'axe X
    )

    return fig

competences_fr_primaire = {
    "Comprendre un texte": {
        "Comprendre un texte lu par l‚Äôenseignant(e)": {"cp": True, "ce1": False, "ce2": True, "cm1": True, "cm2": True},
        "Comprendre des mots lu par l‚Äôenseignant(e)": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
        "Comprendre des phrases lues par l‚Äôenseignant(e)": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
        "Comprendre des mots et des phrases lus par l‚Äôenseignant(e)": {"cp": False, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Comprendre des phrases lues seul(e)": {"cp": False, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Comprendre un texte lu seul(e)": {"cp": False, "ce1": True, "ce2": True, "cm1": True, "cm2": True}
    },
    "Lire et reconna√Ætre les √©l√©ments du langage": {
        "Discriminer des sons": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
        "Lire": {"cp": False, "ce1": True, "ce2": True, "cm1": True, "cm2": True},
        "Se rep√©rer dans une phrase": {"cp": False, "ce1": False, "ce2": True, "cm1": True, "cm2": True},
        "Construire son lexique": {"cp": False, "ce1": False, "ce2": False, "cm1": True, "cm2": True}
    },
    "√âcrire et orthographier": {
        "Reconnaitre des lettres": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
        "√âcrire des syllabes": {"cp": False, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "√âcrire des mots dict√©s": {"cp": False, "ce1": False, "ce2": True, "cm1": True, "cm2": True},
        "Ma√Ætriser l‚Äôorthographe grammaticale de base": {"cp": False, "ce1": False, "ce2": True, "cm1": True, "cm2": True}
    }
}

competences_maths_primaire = {
    "R√©solution de probl√®mes": {
        "R√©soudre des probl√®mes": {"cp": True, "ce1": True, "ce2": True, "cm1": True, "cm2": True}
    },
    "Compr√©hension et repr√©sentation des nombres": {
        "Lire des nombres": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
        "Ecrire des nombres": {"cp": True, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Comparer des nombres": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
        "Placer un nombre sur une ligne num√©rique": {"cp": True, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Reconnaitre des nombres": {"cp": False, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Ordonner des nombres": {"cp": False, "ce1": False, "ce2": True, "cm1": False, "cm2": False},
        "Nommer, lire, √©crire, repr√©senter des nombres": {"cp": False, "ce1": False, "ce2": True, "cm1": True, "cm2": True}
    },
    "Calcul et op√©rations": {
        "Calculer en ligne": {"cp": False, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Calculer mentalement": {"cp": False, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Calculer": {"cp": False, "ce1": False, "ce2": True, "cm1": True, "cm2": True},
        "Quantifier et d√©nombrer": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
    }
}

competences_fr_secondaire = {
    "Comprendre un texte": {
        "Lire et comprendre un texte":{"6e": True, "4e":True, "2nde": True},
        "Comprendre et s'exprimer √† l'oral : comprendre un message oral":{"6e": True, "4e":True, "2nde": True}},
        "Orthographier": {"Comprendre le fonctionnement de la langue : ma√Ætriser l'orthographe":{"6e": True, "4e":True, "2nde": True}},
    "Reconna√Ætre les √©l√©ments du langage": {
        "Comprendre le fonctionnement de la langue : Se rep√©rer dans une phrase et identifier sa composition":{"6e": True, "4e":True, "2nde": True},
        "Comprendre le fonctionnement de la langue : Comprendre et mobiliser le lexique": {"6e": True, "4e":True, "2nde": True}},
}

competences_maths_secondaire = {
    "R√©solution et mod√©lisation": {
        "R√©solution de probl√®me : r√©soudre des probl√®mes en utilisant des nombres, des donn√©es et des grandeurs": {"6e": True, "4e":True, "2nde": False},
        "Calcul litt√©ral : Utiliser des expressions litt√©rales pour traduire ou r√©soudre des probl√®mes": {"6e": False, "4e":False, "2nde": True},
        "Conna√Ætre et utiliser des donn√©es et la notion de fonction": {"6e": False, "4e":True, "2nde": True}
    },
    "Proc√©dures et calculs": {
        "Automatismes : Mobiliser directement des proc√©dures et des connaissances": {"6e": True, "4e":True, "2nde": True},
        "Nombres et calcul : conna√Ætre les nombres et les utiliser dans les calculs": {"6e": True, "4e":True, "2nde": True},
    },
    "Espace et mesures": {
        "Espaces et g√©om√©trie : conna√Ætre et utiliser des notions de g√©om√©trie": {"6e": True, "4e":True, "2nde": True},
        "Grandeurs et mesures : Conna√Ætre des grandeurs et utiliser des mesures": {"6e": False, "4e":False, "2nde": True},
    },
}




#### FOCNTIONNE ###
# # Fonction pour calculer la moyenne par comp√©tence principale
# def calculer_moyenne_par_competence_principale(dataframes, competences_par_niveau):

#     niveaux = ["cp", "ce1", "ce2", "cm1", "cm2",'6e','4e','2nde']
#     moyenne_globale = {"Niveau": [], "Comp√©tence": [], "Moyenne": []}

#     for competence_generale, sous_competences in competences_par_niveau.items():
#         for niveau in niveaux:
#             if niveau in dataframes:
#                 df = dataframes[niveau]
#                 # S√©lection des colonnes correspondant aux sous-comp√©tences
#                 cols = [col for col in sous_competences if col in df.columns and sous_competences[col][niveau]]
#                 if cols:
#                     moyenne = df[cols].mean().mean()
#                     st.write(f"üìå Moyenne calcul√©e pour {niveau.upper()} - {competence_generale} : {moyenne}")# Moyenne des sous-comp√©tences disponibles
#                     if not np.isnan(moyenne):
#                         moyenne_globale["Niveau"].append(niveau.upper())
#                         moyenne_globale["Comp√©tence"].append(competence_generale)
#                         moyenne_globale["Moyenne"].append(moyenne)
#                     else:
#                         st.write(f"‚ö†Ô∏è La moyenne est NaN pour {niveau.upper()} - {competence_generale}, il n'y a peut-√™tre pas de valeurs num√©riques.")
#             else:
#                 st.write(f"‚ö†Ô∏è Attention : Donn√©es absentes pour le niveau **{niveau.upper()}**")

#     df_result = pd.DataFrame(moyenne_globale)
#     if df_result.empty:
#         st.write("‚ö†Ô∏è **Aucune donn√©e calcul√©e, v√©rifiez vos fichiers sources !**")


#     # ‚úÖ Assurer que les niveaux sont bien ordonn√©s
#     # Appliquer l'ordre des niveaux
#     niveau_ordre = ["CP", "CE1", "CE2", "CM1", "CM2"]
#     df_result["Niveau"] = pd.Categorical(df_result["Niveau"], categories=niveau_ordre, ordered=True)
#     df_result.sort_values("Niveau", inplace=True)

#     return df_result

# Fonction pour calculer la moyenne par comp√©tence principale
def calculer_moyenne_par_competence_principale(dataframes, competences_par_niveau, niveaux):
    """
    Calcule la moyenne pour chaque comp√©tence principale en parcourant les niveaux.
    """
    moyenne_globale = {"Niveau": [], "Comp√©tence": [], "Moyenne": []}

    for competence_generale, sous_competences in competences_par_niveau.items():
        for niveau in niveaux:
            if niveau in dataframes:
                df = dataframes[niveau]

                # S√©lection des colonnes correspondant aux sous-comp√©tences
                cols = [col for col in sous_competences if col in df.columns and sous_competences[col].get(niveau, False)]

                if cols:
                    moyenne = df[cols].mean().mean()  # Moyenne de toutes les sous-comp√©tences disponibles

                    if not np.isnan(moyenne):
                        moyenne_globale["Niveau"].append(niveau.upper())  # ‚úÖ Correction de .upper
                        moyenne_globale["Comp√©tence"].append(competence_generale)
                        moyenne_globale["Moyenne"].append(moyenne)



    df_result = pd.DataFrame(moyenne_globale)

    if df_result.empty:
        st.write("‚ö†Ô∏è **Aucune donn√©e calcul√©e, v√©rifiez vos fichiers sources !**")
        return df_result

    # ‚úÖ Assurer que les niveaux sont bien ordonn√©s (primaire et secondaire)
    ordre_niveaux = ["CP", "CE1", "CE2", "CM1", "CM2", "6E", "4E", "2NDE"]
    df_result["Niveau"] = pd.Categorical(df_result["Niveau"], categories=ordre_niveaux, ordered=True)
    df_result.sort_values("Niveau", inplace=True)

    return df_result


# Fonction pour afficher un seul graphique avec toutes les comp√©tences
def creer_graphique_evolution_global(df_moyenne_globale):
    fig = px.line(
        df_moyenne_globale,
        x="Niveau",
        y="Moyenne",
        color="Comp√©tence",
        markers=True,
    )
    fig.update_layout(
        legend_title_text="",
        legend=dict(
            orientation="h",  # Affichage horizontal
            yanchor="top",
            y=-0.3,  # Position sous le graphique
            xanchor="center",
            x=0.5  # Centre la l√©gende horizontalement
        ),
        xaxis_title=None  # Supprime compl√®tement l'axe X
    )

    return fig



# # Ex√©cution des calculs et affichage des graphiques
# df_moyenne_globale_fr_primaire = calculer_moyenne_par_competence_principale(dataframes, competences_fr_primaire)
# df_moyenne_globale_maths_primaire = calculer_moyenne_par_competence_principale(dataframes, competences_maths_primaire)
# df_moyenne_globale_maths_secondaire = calculer_moyenne_par_competence_principale(dataframes, competences_maths_secondaire)
# df_moyenne_globale_fr_secondaire = calculer_moyenne_par_competence_principale(dataframes, competences_fr_secondaire)

niveaux_primaire = ["cp", "ce1", "ce2", "cm1", "cm2"]
niveaux_secondaire = ["6e", "4e", "2nde"]

# Calcul des moyennes pour le PRIMAIRE
df_moyenne_globale_fr_primaire = calculer_moyenne_par_competence_principale(dataframes, competences_fr_primaire, niveaux_primaire)
df_moyenne_globale_maths_primaire = calculer_moyenne_par_competence_principale(dataframes, competences_maths_primaire, niveaux_primaire)

# Calcul des moyennes pour le SECONDAIRE
df_moyenne_globale_fr_secondaire = calculer_moyenne_par_competence_principale(dataframes, competences_fr_secondaire, niveaux_secondaire)
df_moyenne_globale_maths_secondaire = calculer_moyenne_par_competence_principale(dataframes, competences_maths_secondaire, niveaux_secondaire)




# Trier correctement selon l'ordre p√©dagogique
df_moyenne_globale_maths_primaire = df_moyenne_globale_maths_primaire.sort_values("Niveau")


tab1, tab2= st.tabs(['**RESULTATS R√âSEAU**','RESULTATS PAR √âTABLISSEMENT'])

with tab1:

    a, b = st.columns(2)
    a.metric(label="Moyenne en math√©matiques", value=f"{moyenne_maths:.2f}%",border=True)
    b.metric(label="Moyenne en Fran√ßais", value=f"{moyenne_francais:.2f}%",border=True)


    st.markdown('**Primaire / Secondaire : moyenne et r√©partition g√©ographique des r√©sultats**')
    col1, col2=st.columns([1,2])

    with col1:
        # G√©n√©ration et Affichagedu graphique
        st.plotly_chart(creer_bar_chart_maths_francais(moyenne_maths_primaire,moyenne_francais_primaire,moyenne_maths_secondaire,moyenne_francais_secondaire))

    with col2 :
        tab1, tab2= st.tabs(["Primaire", 'Secondaire'])
        etablissements=jitter_coordinates(etablissements,jitter=0.001)
        tab1.plotly_chart(carte_etablissements(etablissements, 'Primaire', titre='Primaire'))
        tab2.plotly_chart(carte_etablissements(etablissements, 'Secondaire', titre='Secondaire'))


    # st.plotly_chart(creer_scatter_maths_francais(dataframes))
        # _,col1,_=st.columns(3)


        # with col1:
        #     with st.popover('Interpretation'):
        #         st.markdown("""
        #         Ce graphique repr√©sente la relation entre la moyenne en math√©matiques et la moyenne en fran√ßais (%) pour tous les √©tablissements du r√©seau, chaque point correspondant √† un √©tablissement.

        #         - La ligne de tendance sugg√®re une corr√©lation positive entre les performances en math√©matiques et en fran√ßais : les √©l√®ves obtenant de bons r√©sultats en maths ont tendance √† r√©ussir √©galement en fran√ßais.
        #         - La taille des bulles indique l'√©cart entre les deux moyennes : une grande bulle signifie une diff√©rence marqu√©e entre les notes en math√©matiques et en fran√ßais, tandis qu'une petite bulle indique un √©quilibre entre les deux mati√®res.
        #         """)

st.markdown("**Dispersion par niveaux et corr√©lation maths/fran√ßais**")
col1,col2=st.columns(2)

with col1:
    st.plotly_chart(creer_boxplot_combine(dataframes))

    # st.plotly_chart(evolution_moyenne_globale_par_niveau(dataframes, competences_matiere))

with col2 :

    st.plotly_chart(creer_scatter_maths_francais(dataframes))



# st.markdown("**Evolution global, par matiere et degr√©**")

col1, col2, col3=st.columns(3)

with col1 :
    st.plotly_chart(evolution_moyenne_globale_par_niveau(dataframes, competences_matiere))

with col2:
    tab1,tab2=st.tabs(['Primaire','Secondaire'])
    tab1.plotly_chart(creer_graphique_evolution_global(df_moyenne_globale_fr_primaire))
    tab2.plotly_chart(creer_graphique_evolution_global(df_moyenne_globale_fr_secondaire))

with col3:
    tab1,tab2=st.tabs(['Primaire','Secondaire'])
    tab1.plotly_chart(creer_graphique_evolution_global(df_moyenne_globale_maths_primaire))
    tab2.plotly_chart(creer_graphique_evolution_global(df_moyenne_globale_maths_secondaire))


with tab2:
    print ('hello')
