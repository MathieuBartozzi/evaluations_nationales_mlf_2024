
import streamlit as st
import pandas as pd
import plotly.express as px
import statsmodels.api as sm
import numpy as np
import hashlib
from openai import OpenAI
import fitz  # PyMuPDF


st.set_page_config(layout="wide")


# Fonction pour charger un onglet sp√©cifique depuis Google Sheets
@st.cache_data
def load_sheet(file_id, gid):
    url = f"https://docs.google.com/spreadsheets/d/{file_id}/export?format=csv&gid={gid}"
    df = pd.read_csv(url)
    return df

# Charger chaque onglet dans un DataFrame
file_id = st.secrets["file_id"]

# Dictionnaire des onglets et leurs identifiants GID
sheets = {
    "cp": "598781322",
    "ce1": "780189338",
    "ce2": "780104876",
    "cm1": "1004968514",
    "cm2": "537652203",
    "6e": "515412955",
    "4e": "1016063815",
    "2nde": "989209309",
    'geo':'191664424',
    'all_data':'608537502'
}


@st.cache_data
def load_sheet(file_id, gid):
    """Charge un onglet sp√©cifique depuis Google Sheets et d√©tecte les lignes supprim√©es."""
    url = f"https://docs.google.com/spreadsheets/d/{file_id}/export?format=csv&gid={gid}"

    # Lire les donn√©es brutes sans suppression
    raw_df = pd.read_csv(url, encoding="utf-8", dtype=str)

    # Charger les donn√©es avec on_bad_lines="skip"
    df = pd.read_csv(url, encoding="utf-8", on_bad_lines="skip", dtype=str)

    # V√©rifier le nombre de lignes supprim√©es
    lines_skipped = len(raw_df) - len(df)

    print(f"‚ö†Ô∏è {lines_skipped} lignes ont √©t√© ignor√©es lors du chargement.")

    return df


# Colonnes √† conserver en string
# STRING_COLUMNS = ["Nom d'√©tablissement", "Pays", "Ville", "Statut Mlfmonde"]

STRING_COLUMNS = ["Nom d'√©tablissement", "Pays", "Ville", "Statut MLF","Comp√©tence √©valu√©e","Niveau scolaire","R√©seau","Cycle",'Mati√®re']



def find_conversion_errors(df):
    """Identifie les valeurs non convertibles dans les colonnes num√©riques."""
    errors = {}
    for col in df.columns:
        if col not in STRING_COLUMNS:
            invalid_values = df[df[col].str.contains(r"[^0-9,.\-]", regex=True, na=False)][col].tolist()
            if invalid_values:
                errors[col] = invalid_values
    return errors

def clean_numeric_columns(df):
    """Remplace les virgules par des points et convertit les valeurs en float."""
    for col in df.columns:
        if col not in STRING_COLUMNS:
            df[col] = df[col].str.replace(',', '.', regex=True)  # Remplacement des virgules
            df[col] = pd.to_numeric(df[col], errors='coerce')  # Convertir en float
    return df

def convert_column_types(df):
    """Convertit les colonnes texte en str et les autres en float apr√®s nettoyage."""
    for col in df.columns:
        if col in STRING_COLUMNS:
            df[col] = df[col].astype(str)  # Assurer que les colonnes restent du texte

    # Identifier les erreurs de conversion AVANT nettoyage
    errors = find_conversion_errors(df)
    if errors:
        print("üö® Erreurs de conversion d√©tect√©es :")
        for col, values in errors.items():
            print(f"   - {col}: {values[:5]} ...")  # Afficher seulement quelques erreurs
    else:
        print("‚úÖ Aucune erreur de conversion d√©tect√©e avant nettoyage.")

    df = clean_numeric_columns(df)  # Nettoyer et convertir les nombres
    return df

@st.cache_data
def process_all_sheets(file_id, sheets):
    """Charge, convertit et v√©rifie tous les onglets du Google Sheets."""
    dataframes = {}
    for name, gid in sheets.items():
        print(f"\nüì• Chargement du fichier : {name}")
        df = load_sheet(file_id, gid)

        # V√©rifier si le fichier a des colonnes Unnamed (cas de res_4)
        if any("Unnamed" in col for col in df.columns):
            print("‚ö†Ô∏è Ce fichier contient des colonnes Unnamed, elles seront supprim√©es.")
            df = df.loc[:, ~df.columns.str.contains("Unnamed")]

        print(f"üîç V√©rification des types AVANT conversion :")
        print(df.dtypes)

        df = convert_column_types(df)

        print(f"‚úÖ V√©rification des types APR√àS conversion :")
        print(df.dtypes)

        dataframes[name] = df
    return dataframes

# Ex√©cuter le processus sur tous les onglets
dataframes = process_all_sheets(file_id, sheets)


# Dictionnaire unique associant chaque comp√©tence √† une mati√®re
competences_matiere = {
    # üìò Comp√©tences en Maths
    "Lire des nombres": "Maths",
    "R√©soudre des probl√®mes": "Maths",
    "Quantifier et d√©nombrer": "Maths",
    "Comparer des nombres": "Maths",
    "Placer un nombre sur une ligne num√©rique": "Maths",
    "Reconnaitre des nombres": "Maths",
    "Calculer en ligne": "Maths",
    "Calculer mentalement": "Maths",
    "Nommer, lire, √©crire, repr√©senter des nombres": "Maths",
    "Calculer": "Maths",
    "Ordonner des nombres": "Maths",
    "Calculer avec des nombres entiers": "Maths",
    "R√©solution de probl√®me : r√©soudre des probl√®mes en utilisant des nombres, des donn√©es et des grandeurs": "Maths",
    "Automatismes : Mobiliser directement des proc√©dures et des connaissances":"Maths",
    "Espaces et g√©om√©trie : conna√Ætre et utiliser des notions de g√©om√©trie":"Maths",
    "Espaces et g√©om√©trie": "Maths",
    "Grandeurs et mesures": "Maths",
    "Nombres et calcul": "Maths",
    "Calcul litt√©ral : Utiliser des expressions litt√©rales pour traduire ou r√©soudre des probl√®mes": "Maths",
    "Calcul litt√©ral : Conna√Ætre et utiliser des donn√©es et la notion de fonction": "Maths",

    # üìï Comp√©tences en Fran√ßais
    "Comprendre un texte lu par l‚Äôenseignant(e)": "Fran√ßais",
    "Comprendre des mots lu par l‚Äôenseignant(e)": "Fran√ßais",
    "Comprendre des phrases lues par l‚Äôenseignant(e)": "Fran√ßais",
    "Discriminer des sons": "Fran√ßais",
    "Reconnaitre des lettres": "Fran√ßais",
    "Comprendre un texte lu seul(e)": "Fran√ßais",
    "Comprendre des phrases lues seul(e)": "Fran√ßais",
    "Comprendre des mots et des phrases lus par l‚Äôenseignant(e)": "Fran√ßais",
    "√âcrire des syllabes": "Fran√ßais",
    "Lire": "Fran√ßais",
    "√âcrire des mots dict√©s": "Fran√ßais",
    "Orthographe de base": "Fran√ßais",
    "Se rep√©rer dans une phrase": "Fran√ßais",
    "Ma√Ætriser l‚Äôorthographe grammaticale de base": "Fran√ßais",
    "Construire le lexique": "Fran√ßais",
    "Lire et comprendre un texte": "Fran√ßais",
    "Comprendre le fonctionnement de la langue : Comprendre et mobiliser le lexique": "Fran√ßais",
    "Comprendre et s'exprimer √† l'oral : comprendre un message oral": "Fran√ßais",
    "Comprendre le fonctionnement de la langue : Se rep√©rer dans une phrase et identifier sa composition": "Fran√ßais",
    "Comprendre le fonctionnement de la langue : ma√Ætriser l'orthographe": "Fran√ßais"
}

renaming_dict = {
    # üìò Comp√©tences en Maths
    "Lire des nombres": "Lecture nombres",
    "R√©soudre des probl√®mes": "R√©solution pb",
    "Quantifier et d√©nombrer": "Quantifier",
    "Comparer des nombres": "Comparer nombres",
    "Placer un nombre sur une ligne num√©rique": "Placer nombre",
    "Reconnaitre des nombres": "Reconnaissance nb",
    "Calculer en ligne": "Calcul ligne",
    "Calculer mentalement": "Calcul mental",
    "Nommer, lire, √©crire, repr√©senter des nombres": "Lire/√âcrire nb",
    "Calculer": "Calcul",
    "Ordonner des nombres": "Ordonner nb",
    "Calculer avec des nombres entiers": "Calcul nb entiers",
    "R√©solution de probl√®me : r√©soudre des probl√®mes en utilisant des nombres, des donn√©es et des grandeurs": "R√©solution pb avanc√©e",
    "Automatismes : Mobiliser directement des proc√©dures et des connaissances": "Automatismes",
    "Espaces et g√©om√©trie : conna√Ætre et utiliser des notions de g√©om√©trie": "G√©om√©trie",
    "Espaces et g√©om√©trie": "G√©om√©trie",
    "Grandeurs et mesures": "Grandeurs/Mesures",
    "Nombres et calcul": "Nombres & Calcul",
    "Calcul litt√©ral : Utiliser des expressions litt√©rales pour traduire ou r√©soudre des probl√®mes": "Calcul litt√©ral",
    "Calcul litt√©ral : Conna√Ætre et utiliser des donn√©es et la notion de fonction": "Calcul & Fonctions",

    # üìï Comp√©tences en Fran√ßais
    "Comprendre un texte lu par l‚Äôenseignant(e)": "Compr√©hension orale",
    "Comprendre des mots lu par l‚Äôenseignant(e)": "Comprendre mots (oral)",
    "Comprendre des phrases lues par l‚Äôenseignant(e)": "Comprendre phrases (oral)",
    "Discriminer des sons": "Discrimination sons",
    "Reconnaitre des lettres": "Reconnaissance lettres",
    "Comprendre un texte lu seul(e)": "Comprendre texte (solo)",
    "Comprendre des phrases lues seul(e)": "Comprendre phrases (solo)",
    "Comprendre des mots et des phrases lus par l‚Äôenseignant(e)": "Comprendre mots & phrases",
    "√âcrire des syllabes": "√âcriture syllabes",
    "Lire": "Lecture",
    "√âcrire des mots dict√©s": "Dict√©e mots",
    "Orthographe de base": "Orthographe",
    "Se rep√©rer dans une phrase": "Rep√©rage phrase",
    "Ma√Ætriser l‚Äôorthographe grammaticale de base": "Orthographe grammaire",
    "Construire le lexique": "Lexique",
    "Lire et comprendre un texte": "Lecture & Compr√©hension",
    "Comprendre le fonctionnement de la langue : Comprendre et mobiliser le lexique": "Comprendre lexique",
    "Comprendre et s'exprimer √† l'oral : comprendre un message oral": "Expression orale",
    "Comprendre le fonctionnement de la langue : Se rep√©rer dans une phrase et identifier sa composition": "Structure phrase",
    "Comprendre le fonctionnement de la langue : ma√Ætriser l'orthographe": "Orthographe avanc√©e"
}

competences_fr_primaire = {
    "Comprendre un texte": {
        "Comprendre un texte lu par l‚Äôenseignant(e)": {"cp": True, "ce1": False, "ce2": True, "cm1": True, "cm2": True},
        "Comprendre des mots lu par l‚Äôenseignant(e)": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
        "Comprendre des phrases lues par l‚Äôenseignant(e)": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
        "Comprendre des mots et des phrases lus par l‚Äôenseignant(e)": {"cp": False, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Comprendre des phrases lues seul(e)": {"cp": False, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Comprendre un texte lu seul(e)": {"cp": False, "ce1": True, "ce2": True, "cm1": True, "cm2": True}
    },
    "Lire et reconna√Ætre les √©l√©ments du langage": {
        "Discriminer des sons": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
        "Lire": {"cp": False, "ce1": True, "ce2": True, "cm1": True, "cm2": True},
        "Se rep√©rer dans une phrase": {"cp": False, "ce1": False, "ce2": True, "cm1": True, "cm2": True},
        "Construire son lexique": {"cp": False, "ce1": False, "ce2": False, "cm1": True, "cm2": True}
    },
    "√âcrire et orthographier": {
        "Reconnaitre des lettres": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
        "√âcrire des syllabes": {"cp": False, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "√âcrire des mots dict√©s": {"cp": False, "ce1": False, "ce2": True, "cm1": True, "cm2": True},
        "Ma√Ætriser l‚Äôorthographe grammaticale de base": {"cp": False, "ce1": False, "ce2": True, "cm1": True, "cm2": True}
    }
}

competences_maths_primaire = {
    "R√©solution de probl√®mes": {
        "R√©soudre des probl√®mes": {"cp": True, "ce1": True, "ce2": True, "cm1": True, "cm2": True}
    },
    "Compr√©hension et repr√©sentation des nombres": {
        "Lire des nombres": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
        "Ecrire des nombres": {"cp": True, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Comparer des nombres": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
        "Placer un nombre sur une ligne num√©rique": {"cp": True, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Reconnaitre des nombres": {"cp": False, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Ordonner des nombres": {"cp": False, "ce1": False, "ce2": True, "cm1": False, "cm2": False},
        "Nommer, lire, √©crire, repr√©senter des nombres": {"cp": False, "ce1": False, "ce2": True, "cm1": True, "cm2": True}
    },
    "Calcul et op√©rations": {
        "Calculer en ligne": {"cp": False, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Calculer mentalement": {"cp": False, "ce1": True, "ce2": False, "cm1": False, "cm2": False},
        "Calculer": {"cp": False, "ce1": False, "ce2": True, "cm1": True, "cm2": True},
        "Quantifier et d√©nombrer": {"cp": True, "ce1": False, "ce2": False, "cm1": False, "cm2": False},
    }
}

competences_fr_secondaire = {
    "Comprendre un texte": {
        "Lire et comprendre un texte":{"6e": True, "4e":True, "2nde": True},
        "Comprendre et s'exprimer √† l'oral : comprendre un message oral":{"6e": True, "4e":True, "2nde": True}},
        "Orthographier": {"Comprendre le fonctionnement de la langue : ma√Ætriser l'orthographe":{"6e": True, "4e":True, "2nde": True}},
    "Reconna√Ætre les √©l√©ments du langage": {
        "Comprendre le fonctionnement de la langue : Se rep√©rer dans une phrase et identifier sa composition":{"6e": True, "4e":True, "2nde": True},
        "Comprendre le fonctionnement de la langue : Comprendre et mobiliser le lexique": {"6e": True, "4e":True, "2nde": True}},
}

competences_maths_secondaire = {
    "R√©solution et mod√©lisation": {
        "R√©solution de probl√®me : r√©soudre des probl√®mes en utilisant des nombres, des donn√©es et des grandeurs": {"6e": True, "4e":True, "2nde": False},
        "Calcul litt√©ral : Utiliser des expressions litt√©rales pour traduire ou r√©soudre des probl√®mes": {"6e": False, "4e":False, "2nde": True},
        "Conna√Ætre et utiliser des donn√©es et la notion de fonction": {"6e": False, "4e":True, "2nde": True}
    },
    "Proc√©dures et calculs": {
        "Automatismes : Mobiliser directement des proc√©dures et des connaissances": {"6e": True, "4e":True, "2nde": True},
        "Nombres et calcul : conna√Ætre les nombres et les utiliser dans les calculs": {"6e": True, "4e":True, "2nde": True},
    },
    "Espace et mesures": {
        "Espaces et g√©om√©trie : conna√Ætre et utiliser des notions de g√©om√©trie": {"6e": True, "4e":True, "2nde": True},
        "Grandeurs et mesures : Conna√Ætre des grandeurs et utiliser des mesures": {"6e": False, "4e":False, "2nde": True},
    },
}


# D√©finition des niveaux de primaire et secondaire
niveaux_primaire = ["cp", "ce1", "ce2", "mc1", "mc2"]
niveaux_secondaire = ["6e", "4e", "2nde"]

# Fonction pour calculer la moyenne d'une mati√®re en fonction des comp√©tences associ√©es
@st.cache_data
def calculer_moyenne_par_matiere(dataframes, competences_matiere, matiere):
    scores = []
    for niveau, df in dataframes.items():
        for comp in df.columns:
            if comp in competences_matiere and competences_matiere[comp] == matiere:
                scores.extend(df[comp].dropna().tolist())
    return sum(scores) / len(scores) if scores else 0

# Calcul des moyennes
moyenne_maths = calculer_moyenne_par_matiere(dataframes, competences_matiere, "Maths")
moyenne_francais = calculer_moyenne_par_matiere(dataframes, competences_matiere, "Fran√ßais")


# üìå Cr√©ation d'un DataFrame unique pour les moyennes par √©tablissement
moyennes_etablissements = {"Primaire": {}, "Secondaire": {}, "G√©n√©rale": {}}
etablissements=pd.DataFrame()



# üìå Calcul des moyennes pour chaque niveau
for matiere in ["Maths", "Fran√ßais"]:
    moyennes_primaire, moyennes_secondaire, moyennes_generale = [], [], []

    for niveau, df in dataframes.items():
        if not df.empty:
            colonnes_matiere = [col for col in df.columns if competences_matiere.get(col) == matiere]
            if colonnes_matiere:
                df[colonnes_matiere] = df[colonnes_matiere].apply(pd.to_numeric, errors='coerce')
                scores_moyens = df.groupby("Nom d'√©tablissement")[colonnes_matiere].mean().mean(axis=1)

                if niveau in niveaux_primaire:
                    moyennes_primaire.append(scores_moyens)
                if niveau in niveaux_secondaire:
                    moyennes_secondaire.append(scores_moyens)
                moyennes_generale.append(scores_moyens)

    # üìå Fusion des moyennes pour chaque cat√©gorie
    moyennes_etablissements["Primaire"][matiere] = pd.concat(moyennes_primaire).groupby(level=0).mean()
    moyennes_etablissements["Secondaire"][matiere] = pd.concat(moyennes_secondaire).groupby(level=0).mean()
    moyennes_etablissements["G√©n√©rale"][matiere] = pd.concat(moyennes_generale).groupby(level=0).mean()

# üìå Transformer les s√©ries en DataFrames et renommer les colonnes
for categorie in ["Primaire", "Secondaire", "G√©n√©rale"]:
    moyennes_etablissements[categorie]["Maths"] = moyennes_etablissements[categorie]["Maths"].rename(f"Moyenne Maths {categorie}").to_frame()
    moyennes_etablissements[categorie]["Fran√ßais"] = moyennes_etablissements[categorie]["Fran√ßais"].rename(f"Moyenne Fran√ßais {categorie}").to_frame()

# üìå Fusion des moyennes avec le DataFrame des √©tablissements
etablissements = pd.DataFrame(dataframes["geo"][["Nom d'√©tablissement", "Ville", "Pays"]].drop_duplicates())

for categorie in ["Primaire", "Secondaire", "G√©n√©rale"]:
    etablissements = etablissements.merge(moyennes_etablissements[categorie]["Maths"], on="Nom d'√©tablissement", how="left")
    etablissements = etablissements.merge(moyennes_etablissements[categorie]["Fran√ßais"], on="Nom d'√©tablissement", how="left")

# üìå Ajout des coordonn√©es GPS depuis dataframes['geo']
etablissements = etablissements.merge(dataframes['geo'][["Nom d'√©tablissement", "Latitude", "Longitude"]], on="Nom d'√©tablissement", how="left")

# Suppression des √©tablissements sans moyenne et sans coordonn√©es GPS
etablissements = etablissements.dropna(subset=["Moyenne Maths G√©n√©rale", "Moyenne Fran√ßais G√©n√©rale", "Latitude", "Longitude"])

# üìå Calcul des moyennes globales
etablissements["Moyenne Maths/Fran√ßais G√©n√©rale"] = (etablissements["Moyenne Maths G√©n√©rale"] + etablissements["Moyenne Fran√ßais G√©n√©rale"]) / 2
etablissements["Moyenne Maths/Fran√ßais Primaire"] = (etablissements["Moyenne Maths Primaire"] + etablissements["Moyenne Fran√ßais Primaire"]) / 2
etablissements["Moyenne Maths/Fran√ßais Secondaire"] = (etablissements["Moyenne Maths Secondaire"] + etablissements["Moyenne Fran√ßais Secondaire"]) / 2


def jitter_coordinates(df, lat_col="Latitude", lon_col="Longitude", jitter=0.1):
    """
    Ajoute un l√©ger bruit al√©atoire aux coordonn√©es latitude/longitude
    pour √©viter la superposition des points.

    :param df: DataFrame contenant les √©tablissements
    :param lat_col: Nom de la colonne de latitude
    :param lon_col: Nom de la colonne de longitude
    :param jitter: Amplitude du bruit al√©atoire ajout√©
    :return: DataFrame avec coordonn√©es ajust√©es si n√©cessaire
    """
    coords_count = df.groupby([lat_col, lon_col])[lat_col].transform('count')
    mask = coords_count > 1

    df.loc[mask, lat_col] += np.random.uniform(-jitter, jitter, size=mask.sum())
    df.loc[mask, lon_col] += np.random.uniform(-jitter, jitter, size=mask.sum())

    return df

def carte_etablissements(etablissements, niveau, titre, jitter=0.1):
    """
    G√©n√®re une carte interactive des √©tablissements scolaires en fonction d'une moyenne choisie (Primaire, Secondaire, ou G√©n√©rale),
    en filtrant ceux qui n'ont pas de donn√©es pour le niveau s√©lectionn√© et en ajustant les coordonn√©es si n√©cessaire.

    :param etablissements: DataFrame contenant les √©tablissements et leurs coordonn√©es.
    :param niveau: "G√©n√©rale", "Primaire" ou "Secondaire" pour choisir la moyenne affich√©e.
    :param titre: Titre de la carte.
    :param jitter: Amplitude du bruit al√©atoire pour √©viter la superposition des points (0 pour d√©sactiver).
    :return: Figure Plotly.
    """
    # S√©lection de la colonne correspondante et filtrage des √©tablissements
    if niveau == "G√©n√©rale":
        colonne_moyenne = "Moyenne Maths/Fran√ßais G√©n√©rale"
        df_filtre = etablissements.copy()
    elif niveau == "Primaire":
        colonne_moyenne = "Moyenne Maths/Fran√ßais Primaire"
        df_filtre = etablissements.dropna(subset=[colonne_moyenne]).copy()

    elif niveau == "Secondaire":
        colonne_moyenne = "Moyenne Maths/Fran√ßais Secondaire"
        df_filtre = etablissements.dropna(subset=[colonne_moyenne]).copy()
    else:
        raise ValueError("Le niveau doit √™tre 'G√©n√©rale', 'Primaire' ou 'Secondaire'.")

    # Appliquer le jitter si n√©cessaire
    if jitter > 0:
        df_filtre = jitter_coordinates(df_filtre, jitter=jitter)

    # Cr√©ation de la carte avec les √©tablissements filtr√©s
    fig = px.scatter_map(
        df_filtre,
        lat="Latitude",
        lon="Longitude",
        hover_name="Nom d'√©tablissement",
        hover_data={
            "Ville": True,
            colonne_moyenne: True,
            "Latitude": False,
            "Longitude": False
        },
        color=colonne_moyenne,  # D√©grad√© de couleur bas√© sur la moyenne s√©lectionn√©e
        zoom=1,  # Zoom initial
        height=350,
        color_continuous_scale="RdYlGn",  # D√©grad√© de rouge (faible) √† vert (fort)
    )

    # Fixer la taille des points et l'opacit√©
    fig.update_traces(marker=dict(size=15, opacity=0.7))

    # Mise en page et affichage
    fig.update_layout(
        map_style="open-street-map",
        margin={"r": 0, "t": 0, "l": 0, "b": 0},
        coloraxis_colorbar=dict(title="Moyenne")  # Ajout de la barre de couleur
    )

    return fig



def creer_scatter_maths_francais(dataframes):
    """
    Cr√©e un graphique de corr√©lation entre Maths et Fran√ßais.
    Chaque point repr√©sente un √©tablissement, avec une couleur diff√©rente selon le pays.
    La taille des points est proportionnelle √† l'√©cart entre les moyennes Maths et Fran√ßais.
    """

    etablissements = {}

    for niveau, df in dataframes.items():
        for _, row in df.iterrows():
            nom = row["Nom d'√©tablissement"]
            pays = row["Pays"]  # Ajout de la colonne Pays
            maths = row[[col for col in df.columns if competences_matiere.get(col) == "Maths"]].mean()
            francais = row[[col for col in df.columns if competences_matiere.get(col) == "Fran√ßais"]].mean()

            if pd.notna(maths) and pd.notna(francais):  # V√©rifie qu'il y a des valeurs valides
                if nom not in etablissements:
                    etablissements[nom] = {"maths": [], "francais": [], "pays": pays}

                etablissements[nom]["maths"].append(maths)
                etablissements[nom]["francais"].append(francais)

    # Cr√©ation du DataFrame final
    data = []
    for nom, valeurs in etablissements.items():
        moyenne_maths = sum(valeurs["maths"]) / len(valeurs["maths"])
        moyenne_francais = sum(valeurs["francais"]) / len(valeurs["francais"])
        ecart = abs(moyenne_maths - moyenne_francais)
        data.append([nom, moyenne_maths, moyenne_francais, ecart, valeurs["pays"]])

    df_final = pd.DataFrame(data, columns=["√âtablissement", "Moyenne Maths", "Moyenne Fran√ßais", "Taille Point", "Pays"])

    # Cr√©ation du graphique Scatter avec couleur selon le pays et une taille variable
    fig = px.scatter(
        df_final,
        x="Moyenne Maths",
        y="Moyenne Fran√ßais",
        hover_name="√âtablissement",
        size="Taille Point",  # Taille des points proportionnelle √† l'√©cart
        color="Pays"  # Couleur diff√©rente par pays
    #     trendline="ols"  # R√©gression lin√©aire pour tous
    )

    # Ajout de la r√©gression lin√©aire pour tous les points
    fig.add_traces(px.scatter(df_final, x="Moyenne Maths", y="Moyenne Fran√ßais", trendline="ols").data[1])

    # Mise en forme
    fig.update_layout(
        xaxis_title="Moyenne Maths (%)",
        yaxis_title="Moyenne Fran√ßais (%)",
        template="plotly_white",
        height=400
    )

    return fig

# Fonction pour calculer la moyenne par cycle (primaire ou secondaire)
@st.cache_data
def calculer_moyenne_cycle(dataframes, competences_matiere, matiere, niveaux):
    scores = []
    for niveau in niveaux:
        if niveau in dataframes:
            df = dataframes[niveau]
            for comp in df.columns:
                if comp in competences_matiere and competences_matiere[comp] == matiere:
                    scores.extend(df[comp].dropna().tolist())
    return sum(scores) / len(scores) if scores else 0

# Calcul des moyennes par cycle
moyenne_maths_primaire = calculer_moyenne_cycle(dataframes, competences_matiere, "Maths", niveaux_primaire)
moyenne_francais_primaire = calculer_moyenne_cycle(dataframes, competences_matiere, "Fran√ßais", niveaux_primaire)
moyenne_maths_secondaire = calculer_moyenne_cycle(dataframes, competences_matiere, "Maths", niveaux_secondaire)
moyenne_francais_secondaire = calculer_moyenne_cycle(dataframes, competences_matiere, "Fran√ßais", niveaux_secondaire)

def creer_bar_chart_maths_francais(maths_primaire, francais_primaire, maths_secondaire, francais_secondaire):
    """
    Cr√©e un graphique en barres comparant les moyennes en Maths et Fran√ßais pour le Primaire et le Secondaire,
    avec suppression de "Mati√®re" dans la l√©gende et du titre de l'axe X.
    """

    # Cr√©ation du DataFrame
    df = pd.DataFrame({
        "Cycle": ["Primaire", "Primaire", "Secondaire", "Secondaire"],
        "Mati√®re": ["Maths", "Fran√ßais", "Maths", "Fran√ßais"],
        "Moyenne": [maths_primaire, francais_primaire, maths_secondaire, francais_secondaire]
    })

    # Cr√©ation du graphique avec Plotly Express
    fig = px.bar(
        df,
        x="Cycle",
        y="Moyenne",
        color="Mati√®re",
        barmode="group",
        color_discrete_sequence=px.colors.qualitative.G10
    )

    # Suppression du titre de la l√©gende
    fig.update_layout(
        xaxis_title="",  # Supprime "Cycle"
        yaxis_title="Moyenne (%)",
        legend_title_text="",  # Supprime "Mati√®re" dans la l√©gende
        yaxis=dict(range=[0, 100]),  # √âchelle de 0 √† 100%
        template="plotly_white"
    )

    return fig

def creer_boxplot_combine(dataframes):
    """
    Cr√©e un boxplot combin√© avec Maths et Fran√ßais pour chaque niveau.
    """
    data = []

    for niveau, df in dataframes.items():
        for matiere in ["Maths", "Fran√ßais"]:
            competences = [col for col in df.columns if competences_matiere.get(col) == matiere]

            for col in competences:
                for score in df[col].dropna():
                    data.append([niveau, score, matiere])

    df_final = pd.DataFrame(data, columns=["Niveau", "Score", "Mati√®re"])
    df_final["Niveau"] = df_final["Niveau"].str.upper()


    # Cr√©ation du boxplot combin√©
    fig = px.box(
        df_final,
        x="Niveau",
        y="Score",
        color="Mati√®re",  # Utilisation de la couleur pour diff√©rencier Maths/Fran√ßais
        color_discrete_sequence=px.colors.qualitative.G10
    )

    # Mise en forme
    fig.update_layout(
        xaxis_title="",
        yaxis_title="R√©sultats (%)",
        #legend_title_text="",
        template="plotly_white",
        height=400,
        legend=dict(
        x=1.05,  # D√©place la l√©gende √† droite du graphique
        y=0.5,   # Place la l√©gende √† mi-hauteur
        xanchor="left",  # S'assure que la l√©gende est align√©e √† gauche de x=1.05
        yanchor="middle",  # Centre verticalement la l√©gende
        orientation="v"  # Garde la l√©gende verticale
    ),
        yaxis=dict(range=[0, 130])
    )

    return fig


def evolution_moyenne_globale_par_niveau(dataframes, competences_matiere):
    """
    Cr√©e un graphique en ligne montrant l'√©volution des moyennes globales en Fran√ßais et en Maths
    pour l'ensemble des √©tablissements au cours des diff√©rents niveaux (du CP √† la 2nde).

    :param dataframes: Dictionnaire contenant les DataFrames des diff√©rents niveaux scolaires.
    :param competences_matiere: Dictionnaire associant chaque comp√©tence √† une mati√®re.
    :return: Figure Plotly.
    """

    # Liste des niveaux dans l'ordre
    niveaux = ["cp", "ce1", "ce2", "cm1", "cm2", "6e", "4e", "2nde"]
    niveau_labels = {
        "cp": "CP", "ce1": "CE1", "ce2": "CE2", "cm1": "CM1", "cm2": "CM2",
        "6e": "6e", "4e": "4e", "2nde": "2nde"
    }

    # Initialisation d'un dictionnaire pour stocker les moyennes
    moyenne_globale = {"Niveau": [], "Mati√®re": [], "Moyenne": []}

    # Parcours de chaque niveau et calcul des moyennes globales
    for niveau in niveaux:
        if niveau in dataframes:
            df = dataframes[niveau]

            # Calcul de la moyenne en maths et fran√ßais pour tous les √©tablissements
            maths_moyenne = df[[col for col in df.columns if competences_matiere.get(col) == "Maths"]].mean().mean()
            francais_moyenne = df[[col for col in df.columns if competences_matiere.get(col) == "Fran√ßais"]].mean().mean()

            if not np.isnan(maths_moyenne):
                moyenne_globale["Niveau"].append(niveau_labels[niveau])
                moyenne_globale["Mati√®re"].append("Maths")
                moyenne_globale["Moyenne"].append(maths_moyenne)

            if not np.isnan(francais_moyenne):
                moyenne_globale["Niveau"].append(niveau_labels[niveau])
                moyenne_globale["Mati√®re"].append("Fran√ßais")
                moyenne_globale["Moyenne"].append(francais_moyenne)

    # Cr√©ation du DataFrame final
    df_moyenne_globale = pd.DataFrame(moyenne_globale)

    # Cr√©ation du graphique en ligne
    fig = px.line(
        df_moyenne_globale,
        x="Niveau",
        y="Moyenne",
        markers=True,
        color="Mati√®re",
        color_discrete_sequence=px.colors.qualitative.G10
    )
    fig.update_layout(
        # title='Evolution globale',
        height=500,
        legend_title_text="",
        legend=dict(
            orientation="h",  # Affichage horizontal
            yanchor="top",
            y=-0.3,  # Position sous le graphique
            xanchor="center",
            x=0.5  # Centre la l√©gende horizontalement
        ),
        xaxis_title=None  # Supprime compl√®tement l'axe X
    )

    return fig




# Fonction pour calculer la moyenne par comp√©tence principale
@st.cache_data
def calculer_moyenne_par_competence_principale(dataframes, competences_par_niveau, niveaux):
    """
    Calcule la moyenne pour chaque comp√©tence principale en parcourant les niveaux.
    """
    moyenne_globale = {"Niveau": [], "Comp√©tence": [], "Moyenne": []}

    for competence_generale, sous_competences in competences_par_niveau.items():
        for niveau in niveaux:
            if niveau in dataframes:
                df = dataframes[niveau]

                # S√©lection des colonnes correspondant aux sous-comp√©tences
                cols = [col for col in sous_competences if col in df.columns and sous_competences[col].get(niveau, False)]

                if cols:
                    moyenne = df[cols].mean().mean()  # Moyenne de toutes les sous-comp√©tences disponibles

                    if not np.isnan(moyenne):
                        moyenne_globale["Niveau"].append(niveau.upper())  # ‚úÖ Correction de .upper
                        moyenne_globale["Comp√©tence"].append(competence_generale)
                        moyenne_globale["Moyenne"].append(moyenne)



    df_result = pd.DataFrame(moyenne_globale)

    if df_result.empty:
        st.write("‚ö†Ô∏è **Aucune donn√©e calcul√©e, v√©rifiez vos fichiers sources !**")
        return df_result

    # ‚úÖ Assurer que les niveaux sont bien ordonn√©s (primaire et secondaire)
    ordre_niveaux = ["CP", "CE1", "CE2", "CM1", "CM2", "6E", "4E", "2NDE"]
    df_result["Niveau"] = pd.Categorical(df_result["Niveau"], categories=ordre_niveaux, ordered=True)
    df_result.sort_values("Niveau", inplace=True)

    return df_result


# Fonction pour afficher un seul graphique avec toutes les comp√©tences
def creer_graphique_evolution_global(df_moyenne_globale):
    fig = px.line(
        df_moyenne_globale,
        x="Niveau",
        y="Moyenne",
        color="Comp√©tence",
        markers=True,
    )
    fig.update_layout(
        legend_title_text="",
        legend=dict(
            orientation="h",  # Affichage horizontal
            yanchor="top",
            y=-0.3,  # Position sous le graphique
            xanchor="center",
            x=0.5  # Centre la l√©gende horizontalement
        ),
        xaxis_title=None  # Supprime compl√®tement l'axe X
    )

    return fig




niveaux_primaire = ["cp", "ce1", "ce2", "cm1", "cm2"]
niveaux_secondaire = ["6e", "4e", "2nde"]

# Calcul des moyennes pour le PRIMAIRE
df_moyenne_globale_fr_primaire = calculer_moyenne_par_competence_principale(dataframes, competences_fr_primaire, niveaux_primaire)
df_moyenne_globale_maths_primaire = calculer_moyenne_par_competence_principale(dataframes, competences_maths_primaire, niveaux_primaire)

# Calcul des moyennes pour le SECONDAIRE
df_moyenne_globale_fr_secondaire = calculer_moyenne_par_competence_principale(dataframes, competences_fr_secondaire, niveaux_secondaire)
df_moyenne_globale_maths_secondaire = calculer_moyenne_par_competence_principale(dataframes, competences_maths_secondaire, niveaux_secondaire)



# Trier correctement selon l'ordre p√©dagogique
df_moyenne_globale_maths_primaire = df_moyenne_globale_maths_primaire.sort_values("Niveau")

def evolution_moyenne_par_etablissement(dataframes, competences_matiere, etablissement_selectionne):
    """
    Cr√©e un graphique en ligne montrant l'√©volution des moyennes en Fran√ßais et en Maths
    pour un √©tablissement s√©lectionn√© au cours des diff√©rents niveaux.

    :param dataframes: Dictionnaire contenant les DataFrames des niveaux scolaires.
    :param competences_matiere: Dictionnaire associant chaque comp√©tence √† une mati√®re.
    :param etablissement_selectionne: Nom de l'√©tablissement s√©lectionn√©.
    :return: Figure Plotly.
    """

    # üìå Liste des niveaux dans l'ordre
    niveaux = ["cp", "ce1", "ce2", "cm1", "cm2", "6e", "4e", "2nde"]
    niveau_labels = {
        "cp": "CP", "ce1": "CE1", "ce2": "CE2", "cm1": "CM1", "cm2": "CM2",
        "6e": "6e", "4e": "4e", "2nde": "2nde"
    }

    # üìå Initialisation d'un dictionnaire pour stocker les moyennes
    moyenne_etablissement = {"Niveau": [], "Mati√®re": [], "Moyenne": []}

    # üìå Parcours des niveaux et calcul des moyennes pour l'√©tablissement s√©lectionn√©
    for niveau in niveaux:
        if niveau in dataframes:
            df = dataframes[niveau]

            # üìå Filtrer uniquement l'√©tablissement s√©lectionn√©
            df_etablissement = df[df["Nom d'√©tablissement"] == etablissement_selectionne]

            if not df_etablissement.empty:
                # üìä Calcul de la moyenne en maths et fran√ßais pour cet √©tablissement
                maths_moyenne = df_etablissement[
                    [col for col in df_etablissement.columns if competences_matiere.get(col) == "Maths"]
                ].mean().mean()

                francais_moyenne = df_etablissement[
                    [col for col in df_etablissement.columns if competences_matiere.get(col) == "Fran√ßais"]
                ].mean().mean()

                # üìå Ajouter les moyennes au dictionnaire
                if not np.isnan(maths_moyenne):
                    moyenne_etablissement["Niveau"].append(niveau_labels[niveau])
                    moyenne_etablissement["Mati√®re"].append("Maths")
                    moyenne_etablissement["Moyenne"].append(maths_moyenne)

                if not np.isnan(francais_moyenne):
                    moyenne_etablissement["Niveau"].append(niveau_labels[niveau])
                    moyenne_etablissement["Mati√®re"].append("Fran√ßais")
                    moyenne_etablissement["Moyenne"].append(francais_moyenne)

    # üìå Cr√©ation du DataFrame final
    df_moyenne_etablissement = pd.DataFrame(moyenne_etablissement)

    if df_moyenne_etablissement.empty:
        return None  # Aucune donn√©e disponible pour cet √©tablissement

    # üìå Cr√©ation du graphique en ligne
    fig = px.line(
        df_moyenne_etablissement,
        x="Niveau",
        y="Moyenne",
        markers=True,
        color="Mati√®re",
        color_discrete_sequence=px.colors.qualitative.G10
    )

    # üìå Mise en page du graphique
    fig.update_layout(
        title="√âvolution globale maths/fran√ßais",
        height=400,
        legend_title_text="",
        legend=dict(
            orientation="h",  # Affichage horizontal
            yanchor="top",
            y=-0.2,  # Position sous le graphique
            xanchor="center",
            x=0.5  # Centre la l√©gende horizontalement
        ),
        xaxis_title=None  # Supprime compl√®tement l'axe X
    )

    return fig



def radar_chart_etablissement_px(df_niveau, competences_matiere, etablissement_selectionne):
    """
    G√©n√®re deux radar charts (Maths & Fran√ßais) avec plotly.express pour comparer
    un √©tablissement s√©lectionn√© √† la moyenne des autres √©tablissements.

    :param df_niveau: DataFrame contenant les donn√©es du niveau s√©lectionn√©.
    :param competences_matiere: Dictionnaire associant chaque comp√©tence √† une mati√®re.
    :param etablissement_selectionne: Nom de l'√©tablissement s√©lectionn√©.
    """

    # üìå V√©rifier si l'√©tablissement a des donn√©es pour ce niveau
    df_etab = df_niveau[df_niveau["Nom d'√©tablissement"] == etablissement_selectionne]

    if df_etab.empty:
        st.warning(f"‚ö†Ô∏è Aucune donn√©e disponible pour {etablissement_selectionne} √† ce niveau.")
        return

    # üìå S√©parer les comp√©tences Maths et Fran√ßais
    competences_maths = [col for col in df_niveau.columns if competences_matiere.get(col) == "Maths"]
    competences_francais = [col for col in df_niveau.columns if competences_matiere.get(col) == "Fran√ßais"]

    # üìå Appliquer le renommage des comp√©tences
    competences_maths_renamed = [renaming_dict.get(comp, comp) for comp in competences_maths]
    competences_francais_renamed = [renaming_dict.get(comp, comp) for comp in competences_francais]

    # üìå Calcul des scores moyens pour l'√©tablissement s√©lectionn√©
    etab_maths_scores = df_etab[competences_maths].mean().tolist()
    etab_francais_scores = df_etab[competences_francais].mean().tolist()

    # üìå Calcul des moyennes des autres √©tablissements (exclure l'√©tablissement s√©lectionn√©)
    df_autres_etabs = df_niveau[df_niveau["Nom d'√©tablissement"] != etablissement_selectionne]

    if df_autres_etabs.empty:
        moyenne_autres_maths = [0] * len(competences_maths)
        moyenne_autres_francais = [0] * len(competences_francais)
    else:
        moyenne_autres_maths = df_autres_etabs[competences_maths].mean().tolist()
        moyenne_autres_francais = df_autres_etabs[competences_francais].mean().tolist()

    # üìå Construction des DataFrames pour Plotly Express
    df_maths = pd.DataFrame({
        "r": etab_maths_scores + moyenne_autres_maths,
        "theta": competences_maths_renamed * 2,  # ‚úÖ Renommage appliqu√©
        "Source": [etablissement_selectionne] * len(competences_maths) + ["Moyenne autres √©tablissements"] * len(competences_maths)
    })

    df_francais = pd.DataFrame({
        "r": etab_francais_scores + moyenne_autres_francais,
        "theta": competences_francais_renamed * 2,  # ‚úÖ Renommage appliqu√©
        "Source": [etablissement_selectionne] * len(competences_francais) + ["Moyenne autres √©tablissements"] * len(competences_francais)
    })

    # üìå Cr√©ation des radars avec `plotly.express`
    fig_maths = px.line_polar(df_maths, r='r', theta='theta', color='Source', line_close=True)
    fig_maths.update_traces(fill='toself',line=dict(color=px.colors.qualitative.G10[0]))
    fig_maths.update_layout(
        title="üìä Comp√©tences en Maths",
        height=350,
        legend=dict(
        orientation="h",  # L√©gende horizontale
        yanchor="top",
        y=-0.2,  # Position sous le graphique
        xanchor="center",
        x=0.5  # Centrer la l√©gende
    ))

    fig_francais = px.line_polar(df_francais, r='r', theta='theta', color='Source', line_close=True)
    fig_francais.update_traces(fill='toself',line=dict(color=px.colors.qualitative.G10[1]))
    fig_francais.update_layout(
        title="üìñ Comp√©tences en Fran√ßais",
        height=350,
        legend=dict(
        orientation="h",
        yanchor="top",
        y=-0.2,
        xanchor="center",
        x=0.5
    ))

        # üìå Faire en sorte que la moyenne soit une ligne non remplie
    fig_maths.update_traces(fill=None, line=dict(color=px.colors.qualitative.G10[9]),selector=dict(name="Moyenne autres √©tablissements"))
    fig_francais.update_traces(fill=None, line=dict(color=px.colors.qualitative.G10[8]),selector=dict(name="Moyenne autres √©tablissements"))



    # üìå Affichage des graphes c√¥te √† c√¥te
    col1, col2 = st.columns(2)
    with col1:
        st.plotly_chart(fig_maths)
    with col2:
        st.plotly_chart(fig_francais)






#############
st.logo('logo_mlf.png',size='large')

st.title("√âvaluations Nationales 2024 - 2025")
st.subheader('Pr√©sentation des r√©sultats des √©tablissements de la Mission Laique Fran√ßaise')

st.divider()


# Domaine autoris√© pour l'authentification
DOMAINE_AUTORISE = "@mlfmonde.org"

# Mot de passe commun (√† s√©curiser dans secrets.toml)
MOT_DE_PASSE_COMMUN = st.secrets["mot_de_passe_commun"]


# Fonction pour hacher le mot de passe
def hacher_mot_de_passe(mot_de_passe):
    return hashlib.sha256(mot_de_passe.encode()).hexdigest()

# Initialiser la variable de session pour l'√©tat de connexion
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False



def login():
    st.write("**Connexion √† l'application**")
    email = st.text_input("Adresse e-mail")
    mot_de_passe = st.text_input("Mot de passe", type="password")

    if st.button("Se connecter"):
        if email.endswith(DOMAINE_AUTORISE) and hacher_mot_de_passe(mot_de_passe) == hacher_mot_de_passe(MOT_DE_PASSE_COMMUN):
            st.session_state.logged_in = True
            st.session_state.email = email
            st.success("Connexion r√©ussie ! Utilisez le menu pour naviguer.")
            st.rerun()
        else:
            st.error("Adresse e-mail ou mot de passe incorrect.")

# V√©rification de l'√©tat de connexion
if not st.session_state.logged_in:
    login()
else :



#############

    tab1, tab2, tab3= st.tabs(["**üåç RESULTATS R√âSEAU**", "**üìç RESULTATS PAR √âTABLISSEMENT**","**üîç M√âTHODOLOGIE**"])


    with tab1:
        a, b = st.columns(2)
        a.metric(label="Moyenne en math√©matiques", value=f"{moyenne_maths:.2f}%",border=True)
        b.metric(label="Moyenne en Fran√ßais", value=f"{moyenne_francais:.2f}%",border=True)


        st.markdown('**Primaire / Secondaire : moyenne et r√©partition g√©ographique des r√©sultats**')
        col1, col2=st.columns([1,2])

        with col1:
            # G√©n√©ration et Affichagedu graphique
            st.plotly_chart(creer_bar_chart_maths_francais(moyenne_maths_primaire,moyenne_francais_primaire,moyenne_maths_secondaire,moyenne_francais_secondaire))

        with col2 :
            tab1_1, tab1_2= st.tabs(["Primaire", 'Secondaire'])
            etablissements=jitter_coordinates(etablissements,jitter=0.001)
            tab1_1.plotly_chart(carte_etablissements(etablissements, 'Primaire', titre='Primaire'))
            tab1_2.plotly_chart(carte_etablissements(etablissements, 'Secondaire', titre='Secondaire'))





        col1,col2=st.columns(2)

        with col1:
            c, d = st.columns(2)
            with c:
                st.markdown("**Dispersion par niveaux**")
            with d:
                with st.popover('Interpretation'):
                    st.markdown("""
                    Ce graphique illustre la r√©partition des r√©sultats en math√©matiques et en fran√ßais (%) selon les niveaux scolaires, avec un boxplot par mati√®re.

                    - Les m√©dianes en maths et en fran√ßais diminuent l√©g√®rement entre le primaire et le secondaire, traduisant une √©volution des performances au fil des ann√©es.
                    - Les √©carts de scores sont plus marqu√©s en fran√ßais, notamment au CM1 et en 2nde, ce qui refl√®te une plus grande variabilit√© des r√©sultats dans cette mati√®re.
                    - Certains scores en fran√ßais d√©passent 100%, indiquant que les √©l√®ves ont franchi les seuils d‚Äô√©valuation en fluence.
                    """)


            st.plotly_chart(creer_boxplot_combine(dataframes))

        with col2 :
            e, f = st.columns(2)
            with e:
                st.markdown("**Corr√©lation maths/fran√ßais**")
            with f:
                with st.popover('Interpretation'):
                    st.markdown("""
                    Ce graphique repr√©sente la relation entre la moyenne en math√©matiques et la moyenne en fran√ßais (%) pour tous les √©tablissements du r√©seau, chaque point correspondant √† un √©tablissement.

                    - La ligne de tendance sugg√®re une corr√©lation positive entre les performances en math√©matiques et en fran√ßais : les √©l√®ves obtenant de bons r√©sultats en maths ont tendance √† r√©ussir √©galement en fran√ßais.
                    - La taille des bulles indique l'√©cart entre les deux moyennes : une grande bulle signifie une diff√©rence marqu√©e entre les notes en math√©matiques et en fran√ßais, tandis qu'une petite bulle indique un √©quilibre entre les deux mati√®res.

                    """)

            st.plotly_chart(creer_scatter_maths_francais(dataframes))




        col1, col2, col3=st.columns(3)

        with col1 :
            st.markdown('**√âvolution globale**')
            st.plotly_chart(evolution_moyenne_globale_par_niveau(dataframes, competences_matiere))

        with col2:
            st.markdown('**√âvolution par comp√©tences : Fran√ßais**')
            tab1_3,tab1_4=st.tabs(['Primaire','Secondaire'])
            tab1_3.plotly_chart(creer_graphique_evolution_global(df_moyenne_globale_fr_primaire))
            tab1_4.plotly_chart(creer_graphique_evolution_global(df_moyenne_globale_fr_secondaire))

        with col3:
            st.markdown('**√âvolution par comp√©tences : Math√©matiques**')
            tab1_5,tab1_6=st.tabs(['Primaire','Secondaire'])
            tab1_5.plotly_chart(creer_graphique_evolution_global(df_moyenne_globale_maths_primaire))
            tab1_6.plotly_chart(creer_graphique_evolution_global(df_moyenne_globale_maths_secondaire))


    with tab2:
        # üìå Cr√©er une colonne combin√©e "√âtablissement (Pays)"
        etablissements["Etablissement_Pays"] = etablissements["Nom d'√©tablissement"] + " (" + etablissements["Pays"] + ")"

        # üìå R√©cup√©ration de la liste des √©tablissements uniques
        etablissements_list = etablissements["Etablissement_Pays"].unique().tolist()

        # üìå S√©lecteur interactif avec autocompl√©tion
        selected_etablissement = st.selectbox(
            "üîç Recherchez votre √©tablissement :",
            sorted(etablissements_list),
            index=0
        )

        # üìå Extraire uniquement le nom de l'√©tablissement s√©lectionn√©
        nom_etablissement_selectionne = selected_etablissement.split(" (")[0]

        # üìå Filtrer les donn√©es en fonction de l'√©tablissement s√©lectionn√©
        etablissement_data = etablissements[etablissements["Nom d'√©tablissement"] == nom_etablissement_selectionne]




        col4,col5=st.columns([1,3])

        with col4:
            # üìä G√©n√©rer le graphique d'√©volution des moyennes pour l'√©tablissement vs r√©seau
            fig_comparaison = evolution_moyenne_par_etablissement(dataframes, competences_matiere, nom_etablissement_selectionne)

            if fig_comparaison:
                st.plotly_chart(fig_comparaison)
            else:
                st.warning("‚ö†Ô∏è Aucune donn√©e disponible pour cet √©tablissement.")

        with col5:
            tab10,tab11,tab12,tab13,tab14,tab15,tab16,tab17=st.tabs(['CP','CE1','CE2','CM1', 'CM2', '6E','4E','2NDE'])

            with tab10:
                radar_chart_etablissement_px(dataframes['cp'], competences_matiere, nom_etablissement_selectionne)
            with tab11 :
                radar_chart_etablissement_px(dataframes['ce1'], competences_matiere, nom_etablissement_selectionne)
            with tab12:
                radar_chart_etablissement_px(dataframes['ce2'], competences_matiere, nom_etablissement_selectionne)
            with tab13:
                radar_chart_etablissement_px(dataframes['cm1'], competences_matiere, nom_etablissement_selectionne)
            with tab14:
                radar_chart_etablissement_px(dataframes['cm2'], competences_matiere, nom_etablissement_selectionne)
            with tab15 :
                radar_chart_etablissement_px(dataframes['6e'], competences_matiere, nom_etablissement_selectionne)
            with tab16:
                radar_chart_etablissement_px(dataframes['4e'], competences_matiere, nom_etablissement_selectionne)
            with tab17:
                radar_chart_etablissement_px(dataframes['2nde'], competences_matiere, nom_etablissement_selectionne)


        # Charger les donn√©es
        # file_path = "fichier_fusionne_corrige.csv"  # Assure-toi que le fichier est bien dans ton r√©pertoire
        # df = pd.read_csv(file_path)
        df=dataframes['all_data']

        st.divider()
        st.markdown("#### üìÑ G√©n√©ration de rapport d'analyse")
        st.markdown("""
        Une IA peut g√©n√©rer automatiquement un rapport d√©taill√© sur les r√©sultats de votre √©tablissement aux √©valuations nationales.
        Vous y trouverez les tendances marquantes, les points forts et les pistes d‚Äôam√©lioration, tout en sugg√©rant des actions de formation pour les enseignants.
        """)


        # Zone de texte pour le contexte local

        with st.container(border=True):

            st.write("**OPptionnel** : l'IA peut prendre en compte d'autres √©l√©ments, notamment de contexte, que vous jugez utiles d'ajouter aux r√©sultats. Deux moyens sont possibles :")

            input1,input2=st.columns(2)

            with input1:
                contexte_local=st.text_area(
                "Vous pouvez ajouter des informations sp√©cifiques sur l'√©tablissement :",
                    placeholder="Exemples :\n"
                                "- Nos √©l√®ves sont majoritairement bilingues, et le fran√ßais est une langue seconde pour une grande partie d‚Äôentre eux, ce qui impacte leur progression en lecture et en √©criture.\n"
                                "- Notre √©quipe enseignante est majoritairement compos√©e d‚Äôenseignants en contrat local, ce qui peut g√©n√©rer des variations dans les m√©thodes p√©dagogiques utilis√©es et la maitrise du fran√ßais\n"
                                "- Une partie de nos √©l√®ves viennent de familles non francophones et ont un acc√®s limit√© au fran√ßais en dehors de l‚Äô√©cole.",
                height=200)

            with input2:
                # Fonction pour extraire un texte limit√© √† 3 pages
                def extract_text_from_pdf(pdf_file, max_pages=3):
                    """Extrait le texte des X premi√®res pages d‚Äôun PDF, avec une limite sur le nombre de mots."""
                    text = ""
                    with fitz.open(stream=pdf_file.read(), filetype="pdf") as doc:
                        for i, page in enumerate(doc):
                            if i >= max_pages:
                                break  # Stop apr√®s le nombre de pages d√©fini
                            text += page.get_text("text") + "\n"
                    return text.strip()

                # Upload d'un fichier PDF en compl√©ment du contexte local
                pdf_uploaded = st.file_uploader(
                    "Vous pouvez t√©l√©verser un document compl√©mentaire, 3 pages maximum :",
                    type=["pdf"]
                )

                pdf_text = ""
                # V√©rification si un fichier a √©t√© ajout√©
                if pdf_uploaded is not None:
                    pdf_text = extract_text_from_pdf(pdf_uploaded)
                    st.success(f"üìé Fichier ajout√© : {pdf_uploaded.name}")




        # Bouton de g√©n√©ration du rapport
        if st.button("‚öôÔ∏è G√©n√©rer le rapport",type='primary'):

            with st.spinner("üöß Votre rapport est en cours de cr√©ation. Merci de patienter un instant ‚è≥..."):

                # Filtrer les donn√©es pour l'√©tablissement s√©lectionn√©
                df_etablissement = df[df["Nom d'√©tablissement"] == nom_etablissement_selectionne]

                # V√©rifier s'il y a des donn√©es pour cet √©tablissement
                if df_etablissement.empty:
                    st.error("Aucune donn√©e disponible pour cet √©tablissement.")
                else:

                    # R√©cup√©rer les informations de l'√©tablissement
                    ville, pays = df_etablissement.iloc[0][["Ville", "Pays"]]
                    niveaux = ", ".join(df_etablissement["Niveau scolaire"].unique())

                    # Titre du rapport
                    titre_rapport = f"Rapport d'analyse pour l'√©tablissement {selected_etablissement} ({ville}, {pays})\nDonn√©es des √©valuations nationales 2024"
                    avertissement ="Ce rapport a √©t√© g√©n√©r√© automatiquement par une intelligence artificielle et doit √™tre interpr√©t√© avec prudence. Il s‚Äôagit d‚Äôune analyse bas√©e sur les donn√©es fournies, et toute d√©cision doit √™tre compl√©t√©e par une r√©flexion p√©dagogique et des √©changes avec les √©quipes enseignantes."

                    # Regrouper les scores moyens par **niveau scolaire et comp√©tence**
                    resultats = df_etablissement.groupby(["Niveau scolaire", "Comp√©tence √©valu√©e"])["Valeur"].mean().reset_index()

                    # Convertir les r√©sultats en format lisible
                    resultats_str = "\n".join([
                        f"- {row['Niveau scolaire']} | {row['Comp√©tence √©valu√©e']} : {row['Valeur']:.1f}%"
                        for _, row in resultats.iterrows()
                    ])

                    # Construction du prompt OpenAI
                    prompt = f"""

                    Tu es un expert en √©ducation et en analyse des r√©sultats scolaires.
                    Ton objectif est d‚Äôaider un chef d‚Äô√©tablissement √† interpr√©ter les performances de ses √©l√®ves et √† identifier des pistes d‚Äôam√©lioration et de formation.
                    Tu dois fournir une analyse claire et structur√©e en adoptant un ton professionnel et neutre. Les √©l√©ments factuels sur les donn√©es chiffr√©es doivent etre pr√©sent√©s comme tel, les propositions de pistes d'actions ou de refelxion sont √† mettre au conditionnel pour renforcer ton r√¥le de conseiller.
                    Emploi un language extrement clair et professionnel, tout en etant bienveillant.

                    # {titre_rapport}

                    ### **Contexte**
                    L‚Äô√©tablissement **{selected_etablissement}**, situ√© √† **{ville}, {pays}**, a r√©cemment obtenu des r√©sultats aux √©valuations nationales pour les niveaux suivants : **{niveaux}**.

                    **Scores moyens par niveau et par comp√©tence :**
                    {resultats_str}

                    Juste apres le titre, il faut faire apparaitre obligatoirement le message {avertissement} en gras et encadr√©.
                    """

                    if contexte_local:
                        prompt += f"\n**Informations sp√©cifiques fournies par l'√©tablissement :**\n{contexte_local}\n"

                    # Ajouter le contenu extrait du PDF si disponible
                    if pdf_text:
                        prompt += f"\n**Informations compl√©mentaires extraites du document joint :**\n{pdf_text[:1500]}..."  # Limite √† 1500 caract√®res pour √©viter un prompt trop long

                    prompt += """
                    ### **Analyse des r√©sultats**
                    1. **Identification des tendances marquantes**
                    - D√©cris les principales forces et points √† renforcer observ√©s dans les r√©sultats.
                    - Mets en √©vidence des √©volutions inhabituelles (ex. chute ou progression marqu√©e d‚Äôun niveau √† l‚Äôautre).
                    - Si possible, compare avec des r√©f√©rences ext√©rieures (moyenne du r√©seau ou nationale).

                    2 **Interpr√©tation p√©dagogique**
                    - Quels facteurs pourraient expliquer ces r√©sultats ?
                    - Existe-t-il des corr√©lations entre certaines comp√©tences ?
                    - Ces r√©sultats pourraient-ils √™tre li√©s √† des approches p√©dagogiques sp√©cifiques ?

                    3. **Pistes d‚Äôam√©lioration possible**
                    - Quelles strat√©gies pourraient √™tre mises en place pour am√©liorer les comp√©tences identifi√©es comme faibles ?
                    - Quels ajustements p√©dagogiques pourraient √™tre envisag√©s ?
                    - Des interventions cibl√©es sur certaines comp√©tences pourraient-elles √™tre b√©n√©fiques ?

                    4. **Besoins de formation pour les enseignants**
                    - Quelles formations pourraient √™tre recommand√©es sur la base des tendances observ√©es ?
                    - Quels axes de formation seraient les plus pertinents pour renforcer les pratiques p√©dagogiques ?
                    - Comment ces formations pourraient-elles √™tre int√©gr√©es dans une strat√©gie d‚Äôam√©lioration continue ?
                    """

                    # S√©lection du mod√®le OpenAI
                    model = "gpt-4o-mini"

                    # Appel API OpenAI
                    client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])  # Assure-toi d'avoir la cl√© API dans secrets.toml
                    response = client.chat.completions.create(
                        model=model,
                        messages=[{"role": "user", "content": prompt}],
                    )

                    # R√©cup√©ration de la r√©ponse
                    rapport = response.choices[0].message.content

                    st.write("C'est pr√™t üòä !")
                    with st.expander('**Consulter le rapport**', icon= "üìÑ"):
                        st.write(rapport)




    with tab3:


        st.markdown("""

Les donn√©es des √©valuations nationales dans le primaire ont pas √©t√© remont√©es de mani√®re diff√©rentes d'une zone √† l'autre, chaque r√©f√©rentiel pr√©sentant des diff√©rences dans la s√©lection et la formulation des comp√©tences √©valu√©es. Afin d‚Äôassurer une lisibilit√© homog√®ne des r√©sultats pour les √©tablissements du r√©seau Mlfmonde, nous avons proc√©d√© √† un arbitrage m√©thodique.

#### üìè M√©thode d‚Äôarbitrage

Dans cet arbitrage, nous avons **mis en correspondance les comp√©tences** entre chaque r√©f√©rentiel :
- Parfois en √©tablissant des √©quivalences **une √† une**.
- Parfois en **regroupant plusieurs comp√©tences** pour en former une seule plus coh√©rente.

Concernant la **fluence**, nous avons appliqu√© une r√®gle de conversion permettant de comparer les r√©sultats entre niveaux. Le score de fluence a √©t√© exprim√© en pourcentage du seuil attendu pour chaque niveau scolaire :

| Niveau | Seuil attendu (mots/min) |
|--------|--------------------------|
| CP     | 50                       |
| CE1    | 70                       |
| CE2    | 90                       |
| CM1    | 110                      |
| CM2    | 120                      |
| 6e     | 130                      |

Ainsi, le pourcentage de fluence d'un niveau est calcul√© en rapportant le nombre moyen de mots lus au seuil attendu pour son niveau.
Par exemple, en CE1 un score moyen de **56 mots/min** donne un score de **80%** (`56/70 √ó 100`).
Si le nombre de mots lus d√©passe le seuil, le pourcentage obtenu sera **sup√©rieur √† 100%**.

**Cas du second degr√©**

Contrairement au primaire, les comp√©tences √©valu√©es dans le second degr√© ne pr√©sentent pas de disparit√©s entre les zones. Elles sont uniformes pour chaque niveau, ce qui permet une comparaison directe entre les √©tablissements du r√©seau Mlfmonde.



---
#### üìö Exemples d‚Äôarbitrages effectu√©s (primaire uniquement)


- La comp√©tence du r√©f√©rentiel 1 *"Passer de l‚Äôoral √† l‚Äô√©crit. S‚Äôinitier √† l‚Äôorthographe lexicale"* a √©t√© associ√©e √† la celle du r√©f√©rentiel 2 *"√âcrire des mots dict√©s"*.

- La comp√©tence du r√©f√©rentiel 1 *"Calculer avec des nombres entiers"*, a √©t√© associ√©e √† trois comp√©tenes agr√©g√©es du r√©f√©rentiel 2  en prenant la moyenne des r√©sultats obtenus de *"M√©moriser des faits num√©riques : √âvaluer la ma√Ætrise des tables de multiplication jusqu‚Äô√† 9*", de
*"M√©moriser des proc√©dures"* et *"Poser des calculer"*.



---
#### üìä Acc√®s aux tableaux d√©taill√©s

Les tableaux d√©taill√©s, pr√©sentant l‚Äôensemble des correspondances et des regroupements effectu√©s, sont consultables ci-dessous.

                    """)



                # Liste des niveaux scolaires
        tabs = ["CP ", "CE1", "CE2", "CM1", "CM2", "6E ", "4E ", "2DE"]

        competences = {
            "CP ": """
        | Comp√©tences                              | R√©f√©rentiel 1                                                                 | R√©f√©rentiel 2                                         |
        |------------------------------------------|----------------------------------------------------------------------------|--------------------------------------------------|
        | Comprendre un texte lu par l‚Äôenseignant(e) | Comprendre un texte lu par l‚Äôenseignant(e). (Rep√©rer et m√©moriser des informations importantes. Les relier entre elles pour leur donner du sens.) | Compr√©hension orale : Comprendre un texte lu par l'adulte |
        | Comprendre des mots lus par l‚Äôenseignant(e) | Comprendre des mots lus par l‚Äôenseignant(e). (M√©moriser le vocabulaire entendu dans les textes.) | Compr√©hension orale : Comprendre des mots donn√©s par l'adulte |
        | Comprendre des phrases lues par l‚Äôenseignant(e) | Comprendre des phrases lues par l‚Äôenseignant(e). (M√©moriser le vocabulaire entendu dans les textes.) | Compr√©hension orale : Comprendre des phrases lues par l'adulte |
        | Reconnaitre des lettres                 | Reconnaitre des lettres. (Savoir discriminer de mani√®re visuelle et conna√Ætre le nom des lettres.) | Moyenne de <br> : 1. Reconna√Ætre des lettres dans une suite de lettres 2. Conna√Ætre le nom des lettres et le son qu‚Äôelles produisent |
        | Discriminer des sons                    | Discriminier des sons (Savoir discriminer de mani√®re auditive et savoir analyser les constituants des mots.) | 1. Phonologie : Manipuler les phon√®mes 2. Phonologie : Manipuler les syllabes |
        | Lire des nombres                         | Lire des nombres entiers jusqu‚Äô√† 10. (Utiliser diverses repr√©sentations des nombres.) | Lire des nombres entiers (Reconna√Ætre des nombres dict√©s). |
        | R√©soudre des probl√®mes                   | R√©soudre des probl√®mes relevant de structures additives (addition/soustraction).(R√©soudre des probl√®mes [‚Ä¶] conduisant √† utiliser les quatre op√©rations.) | R√©soudre des probl√®mes |
        | Quantifier et d√©nombrer                  | Quantifier des collections jusqu‚Äô√† 10 au moins. (D√©nombrer, constituer et comparer des collections en les organisant [‚Ä¶]) | D√©nombrer une collection jusqu'√† 10 et l'associer √† un chiffre |
        | Comparer des nombres                     | Comparer des nombres. (D√©nombrer, constituer et comparer des collections en les organisant [‚Ä¶]) | Comparer des nombres |
        | Reproduire un assemblage                 | Reproduire un assemblage. (Reproduire [‚Ä¶] des assemblages de figures planes.) | Reproduire des assemblages |
        | √âcrire des nombres en entier             | √âcrire des nombres entiers. (Utiliser diverses repr√©sentations des nombres.) | √âcrire des nombres sous la dict√©e |
        | Placer un nombre sur une ligne num√©rique | Associer un nombre entier √† une position. (Associer un nombre entier √† une position [‚Ä¶] ainsi qu‚Äô√† la distance de ce point √† l‚Äôorigine.) | Placer un nombre sur une ligne num√©rique |
        """,
            "CE1": """
        | Comp√©tences                                  | R√©f√©rentiel 1                                                                                             | R√©f√©rentiel 2                                                                                  |
        |----------------------------------------------|----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------|
        | Comprendre un texte lu seul(e)              | Comprendre un texte lu seul(e). (Savoir mobiliser la comp√©tence de d√©codage.)                           | Comprendre un texte lu seul-e                                                               |
        | Comprendre des mots et des phrases lus par l‚Äôenseignant(e) | Comprendre des mots et des phrases lus par l‚Äôenseignant(e). (M√©moriser le vocabulaire entendu dans les textes.) | Moyenne de : <br> 1. Compr√©hension orale: Comprendre des mots lus par l'adulte.<br> 2. Compr√©hension orale : Comprendre des phrases lues par l'adulte |
        | Comprendre des phrases lues seul(e)         | Comprendre des phrases lues seul(e). (Savoir mobiliser la comp√©tence de d√©codage.)                       | Comprendre des phrases lues seul-e                                                         |
        | √âcrire des syllabes dict√©es                 | √âtablir les correspondances graphophonologiques : √©crire des syllabes simples et complexes et des mots. (Conna√Ætre les correspondances graphophonologiques.) | Moyenne de : <br> 1. De l'oral √† l'√©crit: √©crire des syllabes dict√©es <br> 2. De l'oral √† l'√©crit: √©crire des mots dict√©s |
        | Lire                                        | Moyenne de : <br> 1. Lire √† voix haute des mots et un texte. (Savoir d√©coder et comprendre un texte.)<br> 2. % de r√©ussite du score brut en fluence (seuil 70) | Moyenne de : <br> 1. % de r√©ussite du Nombre de mots lus √† voix haute dans un texte en 1 minute (seuil 70) <br> 2. % de r√©ussite du Nombre de mots lus √† voix haute en 1 min (seuil 70) |
        | Reconnaitre des nombres                     | Lire des nombres entiers. (Utiliser diverses repr√©sentations des nombres.)                               | Reconnaitre des nombres sous la dict√©e                                                    |
        | R√©soudre des probl√®mes                      | R√©soudre des probl√®mes relevant de structures additives (addition/soustraction). (R√©soudre des probl√®mes [‚Ä¶] conduisant √† utiliser les quatre op√©rations.) | R√©soudre des probl√®mes                                                                    |
        | Calculer en ligne                           | Calculer en ligne avec des nombres entiers (additions et soustractions). (Traiter √† l‚Äôoral et √† l‚Äô√©crit des calculs relevant des quatre op√©rations.) | R√©aliser des calculs en ligne                                                            |
        | Calculer mentalement                        | Calculer mentalement avec des nombres entiers. (Traiter √† l‚Äôoral et √† l‚Äô√©crit des calculs relevant des quatre op√©rations.) | Calculer mentalement                                                                     |
        | √âcrire des nombres                          | √âcrire des nombres entiers. (Utiliser diverses repr√©sentations des nombres.)                            | √âcrire des nombres sous la dict√©e                                                        |
        | Placer un nombre sur une ligne num√©rique    | Associer un nombre entier √† une position. (Associer un nombre entier √† une position [‚Ä¶] ainsi qu‚Äô√† la distance de ce point √† l‚Äôorigine.) | Placer un nombre sur une ligne num√©rique                                                 |
        | Reproduire des assemblages                  | Reproduire un assemblage. (Reproduire [‚Ä¶] des assemblages de figures planes.)                          | Reproduire des assemblages                                                               |
        """,
        "CE2":"""
        | Comp√©tences                                  | R√©f√©rentiel 1                                                                                             | R√©f√©rentiel 2                                                                                  |
        |----------------------------------------------|----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------|
        | Comprendre un texte lu par l‚Äôenseignant(e)  | √âcouter pour comprendre [des messages oraux] des phrases et un texte lus par un adulte                   | Moyenne de : <br> 1. Comprendre un texte √† l‚Äôoral. (texte lu par l‚Äôenseignant(e))<br> 2. Comprendre des phrases √† l‚Äôoral. (phrases lues par l‚Äôenseignant(e)) |
        | Comprendre un texte lu seul                 | Comprendre un texte et contr√¥ler sa compr√©hension (phrases et texte lus seul)                            | Moyenne de : <br> 1. Comprendre un texte lu seul(e)<br> 2. Comprendre des phrases lues seul(e). (lecture silencieuse) |
        | Lire                                        | Moyenne de : <br> 1. Lire √† voix haute<br> 2. % de r√©ussite du score brut en fluence (seuil 90)          | % de r√©ussite du score brut en fluence (seuil 90)                                           |
        | √âcrire des mots dict√©s                      | Passer de l‚Äôoral √† l‚Äô√©crit. S‚Äôinitier √† l‚Äôorthographe lexicale                                            | √âcrire des mots dict√©s                                                                       |
        | Ma√Ætriser l‚Äôorthographe grammaticale        | Ma√Ætriser l‚Äôorthographe grammaticale de base                                                             | Moyenne de : <br> 1. M√©moriser des temps de conjugaison <br> 2. Utiliser des marques d‚Äôaccord pour les noms et adjectifs |
        | Se rep√©rer dans la phrase                   | Se rep√©rer dans la phrase simple                                                                         | Moyenne de : <br> 1. Reconna√Ætre les principaux constituants de la phrase <br> 2. Diff√©rencier les principales classes de mots |
        | R√©soudre des probl√®mes                      | R√©soudre des probl√®mes en utilisant des nombres entiers et le calcul                                     | R√©soudre des probl√®mes                                                                      |
        | Nommer, lire, √©crire, repr√©senter des nombres entiers | Nommer, lire, √©crire, repr√©senter des nombres entiers                                          | Moyenne de : <br> 1. √âcrire des nombres entiers (sous la dict√©e). <br> 2. Lire des nombres entiers (reconna√Ætre des nombres dict√©s) <br> 3. Reconna√Ætre un nombre entier √† partir de sa d√©composition additive. |
        | Calculer avec des nombres entiers           | Calculer avec des nombres entiers                                                                       | Moyenne de : <br> 1. Poser et calculer. <br> 2. M√©moriser des faits num√©riques. <br> 3. M√©moriser des proc√©dures. |
        | Ordonner des nombres                        | Comprendre et utiliser des nombres entiers pour ordonner                                                 | Moyenne de : <br> 1. Ordonner des nombres. <br> 2. Placer des nombres sur une ligne gradu√©e. |
        """,

        "CM1":"""
        | Comp√©tences                                  | R√©f√©rentiel 1                                                                                             | R√©f√©rentiel 2                                                                                  |
        |----------------------------------------------|----------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------|
        | Comprendre des textes √† l'oral              | √âcouter pour comprendre [des messages oraux] des textes lus par un adulte                                | Comprendre des textes √† l‚Äôoral (textes lus par l‚Äôenseignant(e))                              |
        | Comprendre un texte lu seul(e)              | Comprendre un texte et contr√¥ler sa compr√©hension                                                        | Comprendre un texte lu seul(e) (lecture silencieuse)                                         |
        | Lire √† voix haute                           | Moyenne de : <br> 1. Lire √† voix haute <br> 2. % de r√©ussite du score brut en fluence (seuil 110)        | % de r√©ussite du score brut en fluence (seuil 110)                                          |
        | √âcrire des mots dict√©s                      | Passer de l‚Äôoral √† l‚Äô√©crit. S‚Äôinitier √† l‚Äôorthographe lexicale                                           | √âcrire des mots (dict√©s)                                                                    |
        | Ma√Ætriser l‚Äôorthographe grammaticale        | Ma√Ætriser l‚Äôorthographe grammaticale de base                                                             | Moyenne de : <br> 1. Utiliser des marques d‚Äôaccord pour les noms et adjectifs <br> 2. M√©moriser des temps de conjugaison |
        | Se rep√©rer dans la phrase simple            | Se rep√©rer dans la phrase simple                                                                         | Moyenne de : <br> 1. Identifier la relation sujet-verbe <br> 2. Diff√©rencier les principales classes de mots <br> 3. Reconna√Ætre les principaux constituants de la phrase |
        | Construire le lexique                       | Construire le lexique                                                                                     | Moyenne de : <br> 1. Savoir trouver des synonymes <br> 2. Savoir trouver des mots de la m√™me famille |
        | R√©soudre des probl√®mes                      | R√©soudre des probl√®mes en utilisant des nombres entiers et le calcul                                     | R√©soudre des probl√®mes                                                                      |
        | Nommer, lire, √©crire, repr√©senter des nombres entiers | Nommer, lire, √©crire, repr√©senter des nombres entiers                                          | Moyenne de : <br> 1. √âcrire des nombres entiers (sous la dict√©e) <br> 2. Placer un nombre sur une ligne gradu√©e <br> 3. Reconna√Ætre un nombre √† partir de sa d√©composition additive |
        | Calculer avec des nombres entiers           | Calculer avec des nombres entiers                                                                       | Moyenne de : <br> 1. M√©moriser des faits num√©riques (les tables) <br> 2. M√©moriser des proc√©dures <br> 3. Poser et calculer |

        """,

        "CM2":"""
        | Comp√©tence                                        | Objectif p√©dagogique                                                   | Indicateur d'√©valuation |
        |---------------------------------------------------|------------------------------------------------------------------------|--------------------------|
        | Comprendre des textes √† l'oral                   | √âcouter pour comprendre un message oral, un propos, un discours, un texte lu | Comprendre un texte √† l‚Äôoral (texte lu par l‚Äôenseignant(e)) - Global |
        | Comprendre un texte lu seul(e)                   | Comprendre un texte litt√©raire, des documents et des images et les interpr√©ter | Comprendre un texte lu seul(e) (lecture silencieuse) - Global |
        | √âcrire des mots dict√©s                           | Ma√Ætriser les relations entre l'oral et l'√©crit et acqu√©rir l'orthographe lexicale | √âcrire des mots (dict√©s) - Global |
        | Ma√Ætriser l‚Äôorthographe grammaticale            | Acqu√©rir l‚Äôorthographe grammaticale | Moyenne de : <br> 1. Utiliser des marques d‚Äôaccord pour les noms et adjectifs <br> 2. Ma√Ætriser l‚Äôaccord du verbe avec son sujet - Global <br> 3. M√©moriser des temps de conjugaison - Global |
        | Se rep√©rer dans la phrase simple                 | Identifier les constituants de la phrase simple et se rep√©rer dans la phrase complexe | Moyenne de : <br> 1. Diff√©rencier les principales classes de mots - Global <br> 2. Reconna√Ætre les principaux constituants de la phrase - Global |
        | Construire le lexique                            | Enrichir le lexique | 1. Savoir trouver des synonymes - Global <br> 2. Savoir trouver des mots de la m√™me famille - Global |
        | Lecture                                          | Moyenne de : <br> 1. Lire avec fluidit√© <br> 2. % de r√©ussite du score brut en fluence (seuil 130) | % de r√©ussite de la lecture (seuil 130) |
        | R√©soudre des probl√®mes                           | R√©soudre des probl√®mes en utilisant des nombres entiers et le calcul | R√©soudre des probl√®mes |
        | Nommer, lire, √©crire, repr√©senter des nombres entiers | Nommer, lire, √©crire, repr√©senter des nombres entiers | Moyenne de : <br> 1. Comparer des nombres <br> 2. Comparer des fractions √† l‚Äôunit√© <br> 3. Lire des fractions et des nombres d√©cimaux (Reconna√Ætre des nombres dict√©s) <br> 4. √âcrire des nombres entiers (sous la dict√©e) <br> 5. Reconna√Ætre un nombre entier √† partir de sa d√©composition additive <br> 6. Utiliser les fractions simples dans le cadre de partage de grandeurs. <br> 7. Placer des grands nombres entiers sur une ligne gradu√©e. <br> 8. Placer un nombre sur une ligne gradu√©e (fractions et d√©cimaux) |
        | Calculer avec des nombres entiers                | Calculer avec des nombres entiers | Moyenne de : <br> 1. M√©moriser des faits num√©riques. Les tables de multiplication jusqu‚Äô√† 9 <br> 2. M√©moriser des proc√©dures <br> 3. Poser et calculer |

        """,

        "6E " : """
        | **Comp√©tences en Fran√ßais**                                                | **Comp√©tences en Math√©matiques**                                          |
        |----------------------------------------------------------------------------|---------------------------------------------------------------------------|
        | Lire et comprendre un texte                                                | Automatismes : Mobiliser directement des proc√©dures et des connaissances  |
        | Comprendre le fonctionnement de la langue : Comprendre et mobiliser le lexique | R√©solution de probl√®me : R√©soudre des probl√®mes en utilisant des nombres, des donn√©es et des grandeurs |
        | Comprendre et s'exprimer √† l'oral : Comprendre un message oral             | Espaces et g√©om√©trie : Conna√Ætre et utiliser des notions de g√©om√©trie     |
        | Comprendre le fonctionnement de la langue : Se rep√©rer dans une phrase et identifier sa composition | Grandeurs et mesures : Conna√Ætre des grandeurs et utiliser des mesures    |
        | Comprendre le fonctionnement de la langue : Ma√Ætriser l'orthographe        | Nombres et calcul : Conna√Ætre les nombres et les utiliser dans les calculs |

        """,

        "4E " :"""
        | **Comp√©tences en Fran√ßais**                                                | **Comp√©tences en Math√©matiques**                                          |
        |----------------------------------------------------------------------------|---------------------------------------------------------------------------|
        | Lire et comprendre un texte                                                | Automatismes : Mobiliser directement des proc√©dures et des connaissances  |
        | Comprendre le fonctionnement de la langue : Comprendre et mobiliser le lexique | R√©solution de probl√®me : R√©soudre des probl√®mes en utilisant des nombres, des donn√©es et des grandeurs |
        | Comprendre et s'exprimer √† l'oral : Comprendre un message oral             | Espaces et g√©om√©trie : Conna√Ætre et utiliser des notions de g√©om√©trie     |
        | Comprendre le fonctionnement de la langue : Se rep√©rer dans une phrase et identifier sa composition | Grandeurs et mesures : Conna√Ætre des grandeurs et utiliser des mesures    |
        | Comprendre le fonctionnement de la langue : Ma√Ætriser l'orthographe        | Nombres et calcul : Conna√Ætre les nombres et les utiliser dans les calculs |
        |                                                                            | Conna√Ætre et utiliser des donn√©es et la notion de fonction                |
        """,

        "2DE": """

        | **Comp√©tences en Fran√ßais**                                                | **Comp√©tences en Math√©matiques**                                          |
        |----------------------------------------------------------------------------|---------------------------------------------------------------------------|
        | Lire et comprendre un texte                                                | Automatismes : Mobiliser directement des proc√©dures et des connaissances  |
        | Comprendre le fonctionnement de la langue : Comprendre et mobiliser le lexique | Espaces et g√©om√©trie : Conna√Ætre et utiliser des notions de g√©om√©trie     |
        | Comprendre et s'exprimer √† l'oral : Comprendre un message oral             | Calcul litt√©ral : Utiliser des expressions litt√©rales pour traduire ou r√©soudre des probl√®mes |
        | Comprendre le fonctionnement de la langue : Se rep√©rer dans une phrase et identifier sa composition | Nombres et calcul : Conna√Ætre les nombres et les utiliser dans des calculs |
        | Comprendre le fonctionnement de la langue : Ma√Ætriser l'orthographe        | Calcul litt√©ral : Conna√Ætre et utiliser des donn√©es et la notion de fonction |
        """

        }

        # Cr√©ation des colonnes
        cols = st.columns(len(tabs))

        # Affichage du popover dans chaque colonne
        for i, col in enumerate(cols):
            with col:
                with st.popover(tabs[i]):
                    niveau = tabs[i]  # R√©cup√©rer le niveau correspondant
                    st.markdown(competences[niveau])  # Afficher les comp√©tences

        st.markdown("""

                    Nous avons ensuite r√©alis√© un travail de mise en correspondance des comp√©tences √©valu√©es √† chaque niveau scolaire avec des **comp√©tences g√©n√©rales transversales**. Cette approche permet d‚Äôassurer une continuit√© dans l‚Äôanalyse des apprentissages, en structurant les √©valuations autour d‚Äôun r√©f√©rentiel commun.
                    Gr√¢ce √† cette harmonisation, les comp√©tences g√©n√©rales sont pr√©sentes √† tous les niveaux, ce qui permet d‚Äôobserver l‚Äô√©volution des apprentissages dans le temps. Bien que les cohortes ne soient pas identiques d‚Äôune ann√©e √† l‚Äôautre, cette structuration offre une tendance globale sur le d√©veloppement des comp√©tences des √©l√®ves √† travers les cycles scolaires.
                    Cette m√©thode facilite ainsi la comparaison des r√©sultats et l‚Äôidentification des axes d‚Äôam√©lioration, en offrant une vision plus coh√©rente de la progression des √©l√®ves sur plusieurs ann√©es.

                    Les tableaux d√©taill√©s, pr√©sentant l‚Äôensemble des correspondances g√©n√©rales et des regroupements effectu√©s, sont consultables ci-dessous.


                    """)

        col1,col2 = st.columns(2)

        with col1 :
            with st.popover('Primaire'):
                st.markdown("""
                | **Cat√©gories**                                      | **Comp√©tences**                                   | **CP** | **CE1** | **CE2** | **CM1** | **CM2** |
                |-----------------------------------------------------|--------------------------------------------------|------|------|------|------|------|
                | **Comprendre un texte**                             | Comprendre un texte lu par l‚Äôenseignant(e)      | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |      |
                |                                                     | Comprendre des mots lus par l‚Äôenseignant(e)     | ‚úÖ    |      |      |      |      |
                |                                                     | Comprendre des phrases lues par l‚Äôenseignant(e) | ‚úÖ    |      |      |      |      |
                |                                                     | Comprendre des mots et des phrases lus par l‚Äôenseignant(e) | ‚úÖ |      |      |      |      |
                |                                                     | Comprendre des phrases lues seul(e)            | ‚úÖ    |      |      |      |      |
                |                                                     | Comprendre un texte lu seul(e)                 | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |      |
                | **Lire et reconna√Ætre les √©l√©ments du langage**    | Discriminer des sons                            | ‚úÖ    |      |      |      |      |
                |                                                     | Lire                                           | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |      |
                |                                                     | Se rep√©rer dans une phrase                     | ‚úÖ | ‚úÖ | ‚úÖ |      |      |
                |                                                     | Construire son lexique                         | ‚úÖ | ‚úÖ |      |      |      |
                | **√âcrire et orthographier**                         | Reconnaitre des lettres                        | ‚úÖ    |      |      |      |      |
                |                                                     | √âcrire des syllabes                            | ‚úÖ    |      |      |      |      |
                |                                                     | √âcrire des mots dict√©s                         | ‚úÖ | ‚úÖ | ‚úÖ |      |      |
                |                                                     | Ma√Ætriser l‚Äôorthographe grammaticale de base   | ‚úÖ | ‚úÖ | ‚úÖ |      |      |
                | **R√©solution de probl√®mes**                         | R√©soudre des probl√®mes                         | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ | ‚úÖ |
                | **Compr√©hension et repr√©sentation des nombres**     | Lire des nombres                               | ‚úÖ    |      |      |      |      |
                |                                                     | √âcrire des nombres                             | ‚úÖ | ‚úÖ |      |      |      |
                |                                                     | Comparer des nombres                           | ‚úÖ    |      |      |      |      |
                |                                                     | Placer un nombre sur une ligne num√©rique      | ‚úÖ | ‚úÖ |      |      |      |
                |                                                     | Reconnaitre des nombres                        | ‚úÖ    |      |      |      |      |
                |                                                     | Comprendre et ordonner des nombres entiers     | ‚úÖ    |      |      |      |      |
                |                                                     | Nommer, lire, √©crire, repr√©senter des nombres | ‚úÖ | ‚úÖ | ‚úÖ |      |      |
                | **Calcul et op√©rations**                            | Calculer en ligne                             | ‚úÖ    |      |      |      |      |
                |                                                     | Calculer mentalement                          | ‚úÖ    |      |      |      |      |
                |                                                     | Quantifier et d√©nombrer                       | ‚úÖ    |      |      |      |      |
                |                                                     | Calculer                                      | ‚úÖ | ‚úÖ | ‚úÖ |      |      |
                | **Reproduire des assemblages**                      | Reproduire des assemblages                    | ‚úÖ | ‚úÖ |      |      |      |
                            """)

        with col2 :
            with st.popover('Secondaire'):
                    st.markdown("""
            | **Cat√©gories**                           | **Comp√©tences**                                                           | **6e** | **4e** | **2nde** |
            |------------------------------------------|---------------------------------------------------------------------------|------|------|------|
            | **Comprendre un texte**                  | Lire et comprendre un texte                                              | ‚úÖ | ‚úÖ | ‚úÖ |
            |                                          | Comprendre et s'exprimer √† l'oral : comprendre un message oral           | ‚úÖ | ‚úÖ | ‚úÖ |
            | **Orthographier**                        | Comprendre le fonctionnement de la langue : ma√Ætriser l'orthographe      | ‚úÖ | ‚úÖ | ‚úÖ |
            | **Reconna√Ætre les √©l√©ments du langage**  | Comprendre le fonctionnement de la langue : Se rep√©rer dans une phrase et identifier sa composition | ‚úÖ | ‚úÖ | ‚úÖ |
            |                                          | Comprendre le fonctionnement de la langue : Comprendre et mobiliser le lexique | ‚úÖ | ‚úÖ | ‚úÖ |
            | **Proc√©dures et calculs**                | Automatismes : Mobiliser directement des proc√©dures et des connaissances | ‚úÖ | ‚úÖ | ‚úÖ |
            |                                          | Nombres et calcul : conna√Ætre les nombres et les utiliser dans les calculs | ‚úÖ | ‚úÖ | ‚úÖ |
            | **R√©solution et mod√©lisation**           | R√©solution de probl√®me : r√©soudre des probl√®mes en utilisant des nombres, des donn√©es et des grandeurs | ‚úÖ | ‚úÖ |    |
            |                                          | Calcul litt√©ral : Utiliser des expressions litt√©rales pour traduire ou r√©soudre des probl√®mes |    | ‚úÖ |    |
            |                                          | Conna√Ætre et utiliser des donn√©es et la notion de fonction              | ‚úÖ | ‚úÖ |    |
            | **Espace et mesures**                    | Espaces et g√©om√©trie : conna√Ætre et utiliser des notions de g√©om√©trie    | ‚úÖ | ‚úÖ | ‚úÖ |
            |                                          | Grandeurs et mesures : Conna√Ætre des grandeurs et utiliser des mesures   | ‚úÖ | ‚úÖ |    |
                        """)



        st.markdown("""
            ---

            #### üîí Stockage et de s√©curisation des donn√©es


            Les donn√©es utilis√©es dans l‚Äôapplication sont stock√©es dans un **Google Sheet** s√©curis√© h√©berg√© sur un drive de la Mlfmonde. Elles ne sont pas stock√©es dans la structure de l'application : elles sont upload√©es √† chaque fois l‚Äôapplication est ouverte puis stock√©es temporaitment dans le cache de votre navigateur.

            **S√©curisation des acc√®s :**

            - L‚Äôapplication r√©cup√®re les informations via un lien public mais **incomplet** dans le code, emp√™chant toute consultation ext√©rieure.
            - Les identifiants d‚Äôacc√®s sont stock√©s dans un **espace s√©curis√©** de l‚Äôapplication.
            - Les donn√©es **mises en cache** et disparaissent d√®s que l‚Äôapplication est ferm√©e.
            - L‚Äôacc√®s est restreint par **identifiant et mot de passe**, avec des mesures pr√©ventives en cas de diffusion non autoris√©e.

                        """)
